import aiosqlite

DB_PATH = "bot_database.db"

class Database:
    """–ö–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (Singleton)."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –±–µ–∑ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
        self.ready = False  # –§–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã

    async def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü."""
        if self.ready:  # –ï—Å–ª–∏ –ë–î —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
            return

        print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        async with aiosqlite.connect(DB_PATH) as db:
            db.row_factory = aiosqlite.Row  # –£–ø—Ä–æ—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —á–µ—Ä–µ–∑ dict-like –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            print("üìÇ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

            await db.executescript("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                registration_date TEXT,
                selected_universe TEXT DEFAULT NULL,
                is_blacklisted BOOLEAN DEFAULT 0,
                last_card_time TEXT DEFAULT NULL,
                total_points INTEGER DEFAULT 0,
                spins INTEGER DEFAULT 0,
                last_claimed TEXT DEFAULT NULL,
                daily_streak INTEGER DEFAULT 0,
                referral_code TEXT UNIQUE,
                referred_by INTEGER DEFAULT NULL
            );

            CREATE TABLE IF NOT EXISTS universes (
                universe_id TEXT PRIMARY KEY,
                name TEXT,
                enabled BOOLEAN DEFAULT 0
            );

            CREATE TABLE IF NOT EXISTS user_cards (
                user_id INTEGER,
                card_id INTEGER,
                universe_id TEXT,
                quantity INTEGER DEFAULT 1,
                PRIMARY KEY (user_id, card_id, universe_id),
                FOREIGN KEY (user_id) REFERENCES users (user_id),
                FOREIGN KEY (universe_id) REFERENCES universes (universe_id)
            );

            CREATE TABLE IF NOT EXISTS user_shop (
                user_id INTEGER,
                universe_id TEXT,
                item_id INTEGER PRIMARY KEY AUTOINCREMENT,
                item_type TEXT,
                item_value TEXT,
                price INTEGER,
                FOREIGN KEY (user_id) REFERENCES users (user_id),
                FOREIGN KEY (universe_id) REFERENCES universes (universe_id)
            );

            CREATE TABLE IF NOT EXISTS promocodes (
                promocode TEXT PRIMARY KEY,
                spins_bonus INTEGER,
                usage_limit INTEGER,
                usage_count INTEGER DEFAULT 0
            );

            CREATE TABLE IF NOT EXISTS referrals (
                referral_id INTEGER PRIMARY KEY,
                referrer_id INTEGER,
                joined_date TEXT,
                cards_collected INTEGER DEFAULT 0,
                is_valid BOOLEAN DEFAULT 0,
                FOREIGN KEY (referral_id) REFERENCES users (user_id),
                FOREIGN KEY (referrer_id) REFERENCES users (user_id)
            );
            """)

            # üîπ –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –≤—Å–µ–ª–µ–Ω–Ω—ã–µ, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            print("üåå –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤—Å–µ–ª–µ–Ω–Ω—ã–µ...")
            await db.executemany("""
                INSERT OR IGNORE INTO universes (universe_id, name, enabled)
                VALUES (?, ?, ?)
            """, [
                ("marvel", "Marvel", 1),
                ("star_wars", "Star Wars", 1),
            ])

            await db.commit()
        
        self.ready = True  # ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

    async def get_connection(self):
        """–í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î."""
        return await aiosqlite.connect(DB_PATH)

# ‚úÖ –°–æ–∑–¥–∞—ë–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ë–î
db_instance = Database()
