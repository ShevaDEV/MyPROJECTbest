from aiogram import Router, types
from aiogram.types import FSInputFile, InputMediaPhoto
from handlers.cardshand.callbackcards import PaginationCallback, ReturnCallback
from kbds.inlinecards import pagination_keyboard, rarity_keyboard_for_user
import sqlite3
import os

cardspagination_router = Router()

@cardspagination_router.callback_query(PaginationCallback.filter())
async def paginate_cards(callback: types.CallbackQuery, callback_data: PaginationCallback):
    user_id = callback.from_user.id
    rarity = callback_data.rarity_type
    index = callback_data.index

    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤—Å–µ–ª–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT selected_universe FROM users WHERE user_id = ?", (user_id,))
    selected_universe = cursor.fetchone()
    if not selected_universe or not selected_universe[0]:
        await callback.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ–ª–µ–Ω–Ω—É—é.", show_alert=True)
        conn.close()
        return

    selected_universe = selected_universe[0]

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
    cursor.execute(f"""
    SELECT c.card_id, c.name, c.photo_path, c.rarity, c.points
    FROM user_cards uc
    JOIN [{selected_universe}] c ON uc.card_id = c.card_id
    WHERE uc.user_id = ? AND c.rarity = ?
    """, (user_id, rarity))

    cards = cursor.fetchall()
    conn.close()

    if not cards:
        await callback.answer("–ù–µ—Ç –∫–∞—Ä—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.", show_alert=True)
        return

    total = len(cards)
    index = index % total  # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã
    card_id, name, photo_path, rarity, points = cards[index]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not os.path.isfile(photo_path):
        await callback.message.edit_text(
            f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞—Ä—Ç—ã '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=rarity_keyboard_for_user({}, {}, selected_universe)
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
    caption = (
        f"üÉè *–ö–∞—Ä—Ç–∞*: ¬´*{name}*¬ª\n"
        f"üé≤ *–†–µ–¥–∫–æ—Å—Ç—å*: *{rarity.capitalize()}*\n"
        f"üíé *–û—á–∫–∏*: *{points}*"
    )

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_markup = pagination_keyboard(rarity=rarity, index=index, total=total, include_return=True)

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç InputMediaPhoto –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    media = InputMediaPhoto(
        media=FSInputFile(photo_path),
        caption=caption,
        parse_mode="Markdown"
    )

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_media(
            media=media,
            reply_markup=pagination_markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç.", show_alert=True)


@cardspagination_router.callback_query(ReturnCallback.filter())
async def return_to_categories(callback: types.CallbackQuery, callback_data: ReturnCallback):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    """
    if callback_data.action != "to_categories":
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ

    user_id = callback.from_user.id

    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤—Å–µ–ª–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT selected_universe FROM users WHERE user_id = ?", (user_id,))
    selected_universe = cursor.fetchone()
    if not selected_universe or not selected_universe[0]:
        await callback.message.delete()
        await callback.message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ–ª–µ–Ω–Ω—É—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /select_universe –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        conn.close()
        return

    selected_universe = selected_universe[0]

    # –°—á–∏—Ç–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
    cursor.execute(f"""
    SELECT c.rarity, COUNT(uc.card_id)
    FROM user_cards uc
    JOIN [{selected_universe}] c ON uc.card_id = c.card_id
    WHERE uc.user_id = ?
    GROUP BY c.rarity
    """, (user_id,))
    user_cards = {row[0]: row[1] for row in cursor.fetchall()}

    # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –≤ –±–∞–∑–µ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
    cursor.execute(f"""
    SELECT rarity, COUNT(card_id)
    FROM [{selected_universe}]
    GROUP BY rarity
    """)
    total_cards = {row[0]: row[1] for row in cursor.fetchall()}

    conn.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∫–æ—Å—Ç–µ–π
    keyboard = rarity_keyboard_for_user(user_cards, total_cards, selected_universe)

    try:
        await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        await callback.message.answer(  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞—Ä—Ç:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", show_alert=True)
