from aiogram import Router, types, F
from aiogram.filters.callback_data import CallbackData
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from asyncio import sleep
import sqlite3

promocode_router = Router()

class PromoCodeState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
    waiting_for_promocode = State()

class PromoCodeCallback(CallbackData, prefix="promocode"):
    """–ö–æ–ª–ª–±–µ–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥'."""
    action: str

def promocode_keyboard() -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥'."""
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üéÅ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥",
                    callback_data=PromoCodeCallback(action="enter").pack()
                )
            ]
        ]
    )

@promocode_router.callback_query(PromoCodeCallback.filter(F.action == "enter"))
async def handle_promocode_input(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥'."""
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –£ –≤–∞—Å –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥!")
    await state.set_state(PromoCodeState.waiting_for_promocode)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
    async def timer():
        await sleep(30)
        current_state = await state.get_state()
        if current_state == PromoCodeState.waiting_for_promocode:
            await callback.message.answer("‚è≥ –í—Ä–µ–º—è –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            await state.clear()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    callback.bot.create_task(timer())

@promocode_router.message(PromoCodeState.waiting_for_promocode)
async def process_promocode(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
    promocode = message.text.strip()
    user_id = message.from_user.id

    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    cursor.execute("""
        SELECT promocode, spins_bonus, usage_limit, usage_count
        FROM promocodes
        WHERE promocode = ?
    """, (promocode,))
    promocode_data = cursor.fetchone()

    if not promocode_data:
        # –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        conn.close()
        return

    promocode, spins_bonus, usage_limit, usage_count = promocode_data

    if usage_count >= usage_limit:
        await message.answer("‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–Ω.")
        await state.clear()
        conn.close()
        return

    cursor.execute("""
        SELECT 1
        FROM user_promocodes
        WHERE user_id = ? AND promocode = ?
    """, (user_id, promocode))
    if cursor.fetchone():
        await message.answer("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!")
        await state.clear()
        conn.close()
        return

    # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã
    cursor.execute("UPDATE users SET spins = spins + ? WHERE user_id = ?", (spins_bonus, user_id))
    cursor.execute("INSERT INTO user_promocodes (user_id, promocode) VALUES (?, ?)", (user_id, promocode))
    cursor.execute("UPDATE promocodes SET usage_count = usage_count + 1 WHERE promocode = ?", (promocode,))
    conn.commit()
    conn.close()

    # –£—Å–ø–µ—à–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await message.answer(f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ {promocode} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {spins_bonus} –ø—Ä–æ–∫—Ä—É—Ç–æ–∫.")
    await state.clear()
