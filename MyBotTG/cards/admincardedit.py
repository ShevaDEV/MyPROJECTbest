import os
import random
import asyncio
import aiosqlite
from aiogram import Router, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from handlers.cardshand.callbackcards import EditCardCallback

admincardedit_router = Router()

# üî• –î–∏–∞–ø–∞–∑–æ–Ω—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
RARITY_RANGES = {
    "–æ–±—ã—á–Ω–∞—è": {"attack": (10, 30), "hp": (20, 50)},
    "—Ä–µ–¥–∫–∞—è": {"attack": (30, 50), "hp": (50, 80)},
    "—ç–ø–∏—á–µ—Å–∫–∞—è": {"attack": (50, 80), "hp": (80, 120)},
    "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": {"attack": (80, 120), "hp": (120, 180)},
    "–º–∏—Ñ–∏—á–µ—Å–∫–∞—è": {"attack": (120, 180), "hp": (180, 250)},
}

class EditPointsState(StatesGroup):
    waiting_for_points = State()

@admincardedit_router.callback_query(EditCardCallback.filter(F.action == "edit_rarity"))
async def edit_rarity(callback: types.CallbackQuery, callback_data: EditCardCallback):
    """üîπ –ú–µ–Ω—è–µ—Ç —Ä–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç—ã."""
    card_id = callback_data.card_id
    universe = callback_data.universe

    builder = InlineKeyboardBuilder()
    rarities = ["–æ–±—ã—á–Ω–∞—è", "—Ä–µ–¥–∫–∞—è", "—ç–ø–∏—á–µ—Å–∫–∞—è", "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", "–º–∏—Ñ–∏—á–µ—Å–∫–∞—è"]
    for rarity in rarities:
        builder.row(
            InlineKeyboardButton(
                text=rarity.capitalize(),
                callback_data=f"set_rarity:{card_id}:{universe}:{rarity}"
            )
        )

    if callback.message.text:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–µ–¥–∫–æ—Å—Ç—å –¥–ª—è –∫–∞—Ä—Ç—ã:", reply_markup=builder.as_markup())
    elif callback.message.photo:
        await callback.message.edit_caption("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–µ–¥–∫–æ—Å—Ç—å –¥–ª—è –∫–∞—Ä—Ç—ã:", reply_markup=builder.as_markup())
    else:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)

@admincardedit_router.callback_query(lambda c: c.data.startswith("set_rarity"))
async def set_rarity(callback: types.CallbackQuery):
    """üîπ –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –∏ –µ—ë —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –ë–î."""
    _, card_id, universe, new_rarity = callback.data.split(":")
    card_id = int(card_id)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    attack = random.randint(*RARITY_RANGES[new_rarity]["attack"])
    hp = random.randint(*RARITY_RANGES[new_rarity]["hp"])

    async with aiosqlite.connect("bot_database.db") as db:
        await db.execute(f"""
            UPDATE [{universe}]
            SET rarity = ?, attack = ?, hp = ?
            WHERE card_id = ?
        """, (new_rarity, attack, hp, card_id))
        await db.commit()

    await callback.message.edit_caption(
        caption=(
            f"–†–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_rarity.capitalize()}.\n\n"
            f"üîπ **–ù–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**\n"
            f"‚öîÔ∏è **–ê—Ç–∞–∫–∞:** {attack}\n"
            f"‚ù§Ô∏è **–ó–¥–æ—Ä–æ–≤—å–µ:** {hp}"
        ),
        reply_markup=None
    )
    await callback.answer("–†–µ–¥–∫–æ—Å—Ç—å –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", show_alert=True)

@admincardedit_router.callback_query(EditCardCallback.filter(F.action == "edit_points"))
async def edit_points(callback: types.CallbackQuery, callback_data: EditCardCallback, state: FSMContext):
    """üîπ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–ª—è –∫–∞—Ä—Ç—ã."""
    card_id = callback_data.card_id
    universe = callback_data.universe

    await state.update_data(card_id=card_id, universe=universe)
    await callback.message.edit_caption("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–ª—è –∫–∞—Ä—Ç—ã:", reply_markup=None)
    await state.set_state(EditPointsState.waiting_for_points)
    await callback.answer()

@admincardedit_router.message(EditPointsState.waiting_for_points)
async def set_points(message: types.Message, state: FSMContext):
    """üîπ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–ª—è –∫–∞—Ä—Ç—ã."""
    data = await state.get_data()
    card_id = data.get("card_id")
    universe = data.get("universe")

    try:
        new_points = int(message.text)
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    async with aiosqlite.connect("bot_database.db") as db:
        await db.execute(f"""
            UPDATE [{universe}]
            SET points = ?
            WHERE card_id = ?
        """, (new_points, card_id))
        await db.commit()

    await message.answer(f"‚úÖ –û—á–∫–∏ –∫–∞—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ {new_points}.")
    await state.clear()

@admincardedit_router.callback_query(EditCardCallback.filter(F.action == "delete"))
async def delete_card(callback: types.CallbackQuery, callback_data: EditCardCallback):
    """üîπ –£–¥–∞–ª—è–µ—Ç –∫–∞—Ä—Ç—É –∏–∑ –ë–î –∏ –µ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
    card_id = callback_data.card_id
    universe = callback_data.universe

    async with aiosqlite.connect("bot_database.db") as db:
        async with db.execute(f"SELECT photo_path FROM [{universe}] WHERE card_id = ?", (card_id,)) as cursor:
            result = await cursor.fetchone()

        if result:
            photo_path = result[0]
            if os.path.exists(photo_path):
                try:
                    await asyncio.to_thread(os.remove, photo_path)  # üîπ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {photo_path}: {e}")

        await db.execute(f"DELETE FROM [{universe}] WHERE card_id = ?", (card_id,))
        await db.commit()

    await callback.message.edit_caption("üóë –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=None)
    await callback.answer("–ö–∞—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
