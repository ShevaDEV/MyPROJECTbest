from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import sqlite3
import random
import asyncio

shop_router = Router()

SPINS_COST = {3: 2400, 4: 3200, 5: 4000, 6: 4800, 7: 5600, 8: 6400}
RARITY_WEIGHTS = {
    "–æ–±—ã—á–Ω–∞—è": 50,
    "—Ä–µ–¥–∫–∞—è": 30,
    "—ç–ø–∏—á–µ—Å–∫–∞—è": 15,
    "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": 4,
    "–º–∏—Ñ–∏—á–µ—Å–∫–∞—è": 1,
}

def generate_user_shop(user_id: int, universe: str):
    with sqlite3.connect("bot_database.db") as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM user_shop WHERE user_id = ? AND universe = ?", (user_id, universe))

        spins = random.randint(3, 8)
        spins_price = SPINS_COST[spins]
        cursor.execute("""
            INSERT INTO user_shop (user_id, universe, item_type, item_value, price)
            VALUES (?, ?, 'spins', ?, ?)
        """, (user_id, universe, spins, spins_price))

        rarity = random.choices(list(RARITY_WEIGHTS.keys()), weights=RARITY_WEIGHTS.values(), k=1)[0]
        rarity_price = calculate_rarity_price(rarity)
        cursor.execute("""
            INSERT INTO user_shop (user_id, universe, item_type, item_value, price)
            VALUES (?, ?, 'rarity_guarantee', ?, ?)
        """, (user_id, universe, rarity, rarity_price))

        cursor.execute(f"SELECT card_id, name, rarity, points FROM [{universe}]")
        cards = cursor.fetchall()
        if cards:
            card = random.choice(cards)
            card_id, card_name, rarity, points = card
            card_price = points * 3
            cursor.execute("""
                INSERT INTO user_shop (user_id, universe, item_type, item_value, price)
                VALUES (?, ?, 'specific_card', ?, ?)
            """, (user_id, universe, card_id, card_price))

def calculate_rarity_price(rarity: str) -> int:
    rarity_points = {
        "–æ–±—ã—á–Ω–∞—è": 150,
        "—Ä–µ–¥–∫–∞—è": 400,
        "—ç–ø–∏—á–µ—Å–∫–∞—è": 800,
        "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": 1500,
        "–º–∏—Ñ–∏—á–µ—Å–∫–∞—è": 2500,
    }
    return rarity_points[rarity] * 2

async def update_all_shops():
    loop = asyncio.get_event_loop()
    await loop.run_in_executor(None, _sync_update_all_shops)

def _sync_update_all_shops():
    with sqlite3.connect("bot_database.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT user_id, selected_universe FROM users WHERE selected_universe IS NOT NULL")
        users = cursor.fetchall()
        for user_id, universe in users:
            generate_user_shop(user_id, universe)
        conn.commit()

@shop_router.message(Command("shop"))
@shop_router.message(F.text.lower() == "–º–∞–≥–∞–∑–∏–Ω")
async def show_shop(message: types.Message):
    user_id = message.from_user.id

    with sqlite3.connect("bot_database.db") as conn:
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ–ª–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT selected_universe, total_points FROM users WHERE user_id = ?", (user_id,))
        user_data = cursor.fetchone()

        if not user_data or not user_data[0]:
            await message.answer("‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ–ª–µ–Ω–Ω—É—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /select_universe –¥–ª—è –≤—ã–±–æ—Ä–∞.")
            return

        selected_universe, user_balance = user_data

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        cursor.execute("""
            SELECT item_id, item_type, item_value, price 
            FROM user_shop 
            WHERE user_id = ? AND universe = ?
        """, (user_id, selected_universe))
        items = cursor.fetchall()

        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ
        if not items:
            generate_user_shop(user_id, selected_universe)
            cursor.execute("""
                SELECT item_id, item_type, item_value, price 
                FROM user_shop 
                WHERE user_id = ? AND universe = ?
            """, (user_id, selected_universe))
            items = cursor.fetchall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    shop_text = (
        f"üõí *–ú–∞–≥–∞–∑–∏–Ω –≤—Å–µ–ª–µ–Ω–Ω–æ–π {selected_universe.capitalize()}*\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: *{user_balance}* –æ—á–∫–æ–≤\n\n"
        "üéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    for item_id, item_type, item_value, price in items:
        if item_type == "spins":
            shop_text += f"üîÑ –ü—Ä–æ–∫—Ä—É—Ç–∫–∏: *{item_value} —à—Ç.* ‚Äî *{price}* –æ—á–∫–æ–≤\n"
            button_text = f"üõç –ü—Ä–æ–∫—Ä—É—Ç–∫–∏"

        elif item_type == "rarity_guarantee":
            shop_text += f"üé≤ –ì–∞—Ä–∞–Ω—Ç –Ω–∞ –∫–∞—Ä—Ç—É —Ä–µ–¥–∫–æ—Å—Ç–∏: *{item_value.capitalize()}* ‚Äî *{price}* –æ—á–∫–æ–≤\n"
            button_text = f"üõç –ì–∞—Ä–∞–Ω—Ç"

        elif item_type == "specific_card":
            cursor.execute(f"SELECT name FROM [{selected_universe}] WHERE card_id = ?", (item_value,))
            card_name = cursor.fetchone()[0]
            shop_text += f"üÉè –ö–∞—Ä—Ç–∞: *{card_name}* ‚Äî *{price}* –æ—á–∫–æ–≤\n"
            button_text = f"üõç –ö–∞—Ä—Ç–∞"

        keyboard.inline_keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"buy_{item_id}")])

    await message.answer(shop_text, reply_markup=keyboard, parse_mode="Markdown")

@shop_router.message(Command("update_shop"))
async def update_shop(message: types.Message):
    await update_all_shops()
    await message.answer("üîÑ –ú–∞–≥–∞–∑–∏–Ω –æ–±–Ω–æ–≤–ª–µ–Ω!")
