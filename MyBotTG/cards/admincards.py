import os
import aiosqlite
import asyncio
import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from config import OWNER_ID
from handlers.cardshand.callbackcards import OwnerRarityCallback, EditCardCallback, AdminPaginationCallback
from kbds.inlinecards import rarity_keyboard_for_owner, admin_pagination_keyboard

admincards_router = Router()

@admincards_router.message(Command("view_cards"))
@admincards_router.message(F.text == "–ö–∞—Ä—Ç—ã –≤ –±–∞–∑–µ")
async def admin_view_cards(message: types.Message):
    """üìå –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö."""
    if message.from_user.id != OWNER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    async with aiosqlite.connect("bot_database.db") as db:
        async with db.execute("SELECT universe_id, name FROM universes WHERE enabled = 1") as cursor:
            universes = await cursor.fetchall()

    if not universes:
        await message.answer("üìÇ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö.")
        return

    builder = InlineKeyboardBuilder()
    for universe_id, universe_name in universes:
        builder.row(InlineKeyboardButton(text=universe_name, callback_data=f"view_{universe_id}"))

    await message.answer("üåå –í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ–ª–µ–Ω–Ω—É—é:", reply_markup=builder.as_markup())

@admincards_router.callback_query(lambda c: c.data.startswith("view_"))
async def view_universe(callback: types.CallbackQuery):
    """üîπ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏ –∫–∞—Ä—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π."""
    universe_id = callback.data.split("_", 1)[1]

    async with aiosqlite.connect("bot_database.db") as db:
        async with db.execute("SELECT enabled, name FROM universes WHERE universe_id = ?", (universe_id,)) as cursor:
            result = await cursor.fetchone()

    if not result or result[0] != 1:
        await callback.answer("‚ùå –í—ã–±—Ä–∞–Ω–Ω–∞—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    universe_name = result[1]
    rarity_kb = rarity_keyboard_for_owner(universe_id)

    await callback.message.answer(f"üé¥ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç –∏–∑ –≤—Å–µ–ª–µ–Ω–Ω–æ–π *{universe_name}*:", reply_markup=rarity_kb, parse_mode="Markdown")
    await callback.answer()

@admincards_router.callback_query(OwnerRarityCallback.filter())
async def rarity_selected(callback: types.CallbackQuery, callback_data: OwnerRarityCallback, state: FSMContext):
    """üîπ –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ä—Ç—ã —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç—å—é."""
    universe = callback_data.universe
    rarity_type = callback_data.rarity_type

    async with aiosqlite.connect("bot_database.db") as db:
        async with db.execute(f"""
            SELECT card_id, name, photo_path, rarity, attack, hp, points
            FROM [{universe}]
            WHERE rarity = ?
        """, (rarity_type,)) as cursor:
            cards = await cursor.fetchall()

    if not cards:
        await callback.message.answer(f"üì≠ –í —ç—Ç–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π –Ω–µ—Ç –∫–∞—Ä—Ç —Å —Ä–µ–¥–∫–æ—Å—Ç—å—é *{rarity_type.capitalize()}*.", parse_mode="Markdown")
        return

    await state.update_data(admin_cards=cards, universe=universe)

    card_id, name, photo_path, rarity, attack, hp, points = cards[0]
    caption = (
        f"üÜî ID: `{card_id}`\n"
        f"üè∑Ô∏è –ò–º—è: *{name}*\n"
        f"üé≤ –†–µ–¥–∫–æ—Å—Ç—å: *{rarity.capitalize()}*\n"
        f"‚öîÔ∏è –ê—Ç–∞–∫–∞: `{attack}`\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: `{hp}`\n"
        f"üíé –û—á–∫–∏: `{points}`\n"
    )

    pagination_markup = combine_pagination_and_edit_buttons(rarity, 0, len(cards), card_id, universe)

    if not os.path.isfile(photo_path):
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã (ID: `{card_id}`) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode="Markdown")
        return

    photo_file = await asyncio.to_thread(FSInputFile, photo_path)

    await callback.message.answer_photo(photo=photo_file, caption=caption, reply_markup=pagination_markup, parse_mode="Markdown")
    await callback.answer()

@admincards_router.callback_query(AdminPaginationCallback.filter())
async def paginate_cards(callback: types.CallbackQuery, callback_data: AdminPaginationCallback, state: FSMContext):
    """üîπ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)."""
    rarity_type = callback_data.rarity_type
    index = callback_data.index

    data = await state.get_data()
    cards = data.get("admin_cards")
    universe = data.get("universe")

    if not cards:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        return

    index = index % len(cards)
    card_id, name, photo_path, rarity, attack, hp, points = cards[index]

    caption = (
        f"üÜî ID: `{card_id}`\n"
        f"üè∑Ô∏è –ò–º—è: *{name}*\n"
        f"üé≤ –†–µ–¥–∫–æ—Å—Ç—å: *{rarity.capitalize()}*\n"
        f"‚öîÔ∏è –ê—Ç–∞–∫–∞: `{attack}`\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: `{hp}`\n"
        f"üíé –û—á–∫–∏: `{points}`\n"
    )

    pagination_markup = combine_pagination_and_edit_buttons(rarity_type, index, len(cards), card_id, universe)

    if not os.path.isfile(photo_path):
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã (ID: `{card_id}`) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode="Markdown")
        return

    photo_file = await asyncio.to_thread(FSInputFile, photo_path)

    await callback.message.edit_media(
        media=types.InputMediaPhoto(media=photo_file, caption=caption, parse_mode="Markdown"),
        reply_markup=pagination_markup
    )
    await callback.answer()

def combine_pagination_and_edit_buttons(rarity, index, total, card_id, universe):
    """
    üîπ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    builder = InlineKeyboardBuilder()

    if total > 1:
        builder.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=AdminPaginationCallback(rarity_type=rarity, index=(index - 1) % total).pack()),
            InlineKeyboardButton(text=f"{index + 1}/{total}", callback_data="noop"),
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=AdminPaginationCallback(rarity_type=rarity, index=(index + 1) % total).pack())
        )

    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∫–æ—Å—Ç—å", callback_data=EditCardCallback(action="edit_rarity", card_id=card_id, universe=universe).pack()),
        InlineKeyboardButton(text="‚úèÔ∏è –û—á–∫–∏", callback_data=EditCardCallback(action="edit_points", card_id=card_id, universe=universe).pack()),
        InlineKeyboardButton(text="‚ùå –ö–∞—Ä—Ç—É", callback_data=EditCardCallback(action="delete", card_id=card_id, universe=universe).pack())
    )

    return builder.as_markup()
