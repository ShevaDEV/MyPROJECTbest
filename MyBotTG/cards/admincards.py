from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
import sqlite3
import os
import logging
from config import OWNER_ID
from handlers.cardshand.callbackcards import OwnerRarityCallback, EditCardCallback, AdminPaginationCallback
from kbds.inlinecards import rarity_keyboard_for_owner, admin_pagination_keyboard

AVAILABLE_UNIVERSES = ["marvel", "star_wars", "dc"]

admincards_router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö–∞—Ä—Ç—ã –≤ –±–∞–∑–µ" –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
@admincards_router.message(Command("view_cards"))
@admincards_router.message(F.text == "–ö–∞—Ä—Ç—ã –≤ –±–∞–∑–µ")
async def admin_view_cards(message: types.Message):
    if message.from_user.id != OWNER_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ–ª–µ–Ω–Ω–æ–π.")
    builder = InlineKeyboardBuilder()
    for universe in AVAILABLE_UNIVERSES:
        builder.row(InlineKeyboardButton(text=universe.capitalize(), callback_data=f"view_{universe}"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ–ª–µ–Ω–Ω—É—é:", reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ–ª–µ–Ω–Ω–æ–π
@admincards_router.callback_query(lambda c: c.data.startswith("view_"))
async def view_universe(callback: types.CallbackQuery):
    universe = callback.data.split("_")[1]

    if universe not in AVAILABLE_UNIVERSES:
        await callback.answer("–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º rarity_keyboard_for_owner –∏–∑ inlinecards
    rarity_kb = rarity_keyboard_for_owner(universe)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–¥–∫–æ—Å—Ç—è–º–∏
    await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç –∏–∑ –≤—Å–µ–ª–µ–Ω–Ω–æ–π {universe.capitalize()}:", reply_markup=rarity_kb)
    await callback.answer()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏
@admincards_router.callback_query(OwnerRarityCallback.filter())
async def rarity_selected(callback: types.CallbackQuery, callback_data: OwnerRarityCallback, state: FSMContext):
    universe = callback_data.universe
    rarity_type = callback_data.rarity_type

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    with sqlite3.connect("bot_database.db") as conn:
        cursor = conn.cursor()
        cursor.execute(f"""
        SELECT card_id, name, photo_path, rarity, attack, hp, points
        FROM [{universe}]
        WHERE rarity = ?
        """, (rarity_type,))
        cards = cursor.fetchall()

    if not cards:
        await callback.message.answer(f"–í —ç—Ç–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π –Ω–µ—Ç –∫–∞—Ä—Ç —Å —Ä–µ–¥–∫–æ—Å—Ç—å—é {rarity_type.capitalize()}.")
        await callback.answer()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSMContext
    await state.update_data(admin_cards=cards, universe=universe)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É
    card_id, name, photo_path, rarity, attack, hp, points = cards[0]
    caption = (
        f"üÜî ID: {card_id}\n"
        f"üè∑Ô∏è –ò–º—è: {name}\n"
        f"üé≤ –†–µ–¥–∫–æ—Å—Ç—å: {rarity.capitalize()}\n"
        f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {attack}\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {hp}\n"
        f"üíé –û—á–∫–∏: {points}\n"
    )
    pagination_markup = combine_pagination_and_edit_buttons(
        rarity=rarity_type, index=0, total=len(cards), card_id=card_id, universe=universe
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not os.path.isfile(photo_path):
        await callback.message.answer(f"–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã (ID: {card_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await callback.answer()
        return

    photo_file = FSInputFile(photo_path)
    await callback.message.answer_photo(
        photo=photo_file,
        caption=caption,
        reply_markup=pagination_markup
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@admincards_router.callback_query(AdminPaginationCallback.filter())
async def paginate_cards(callback: types.CallbackQuery, callback_data: AdminPaginationCallback, state: FSMContext):
    rarity_type = callback_data.rarity_type
    index = callback_data.index

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSMContext
    data = await state.get_data()
    cards = data.get("admin_cards")
    universe = data.get("universe")

    if not cards:
        await callback.answer("–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        return

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å
    index = index % len(cards)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã
    card_id, name, photo_path, rarity, attack, hp, points = cards[index]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
    caption = (
        f"üÜî ID: {card_id}\n"
        f"üè∑Ô∏è –ò–º—è: {name}\n"
        f"üé≤ –†–µ–¥–∫–æ—Å—Ç—å: {rarity.capitalize()}\n"
        f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {attack}\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {hp}\n"
        f"üíé –û—á–∫–∏: {points}\n"
    )

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    pagination_markup = combine_pagination_and_edit_buttons(
        rarity=rarity_type, index=index, total=len(cards), card_id=card_id, universe=universe
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not os.path.isfile(photo_path):
        await callback.message.answer(f"–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã (ID: {card_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await callback.answer()
        return

    photo_file = FSInputFile(photo_path)
    await callback.message.edit_media(
        media=types.InputMediaPhoto(media=photo_file, caption=caption),
        reply_markup=pagination_markup
    )

    await callback.answer()

def combine_pagination_and_edit_buttons(rarity, index, total, card_id, universe):
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ–¥–Ω—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    :param rarity: –†–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç.
    :param index: –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã.
    :param total: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç.
    :param card_id: ID —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã.
    :param universe: –í—Å–µ–ª–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç.
    :return: InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if total > 1:
        builder.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è",
                callback_data=AdminPaginationCallback(rarity_type=rarity, index=(index - 1) % total).pack()
            ),
            InlineKeyboardButton(
                text=f"{index + 1}/{total}",
                callback_data="noop"  # –ù–µ–ø—Ä–∏–º–µ–Ω—è–µ–º–∞—è –∫–Ω–æ–ø–∫–∞, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∞—è —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç—á–∏–∫
            ),
            InlineKeyboardButton(
                text="‚û°Ô∏è",
                callback_data=AdminPaginationCallback(rarity_type=rarity, index=(index + 1) % total).pack()
            )
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    builder.row(
        InlineKeyboardButton(
            text="‚úèÔ∏è –†–µ–¥–∫–æ—Å—Ç—å",
            callback_data=EditCardCallback(action="edit_rarity", card_id=card_id, universe=universe).pack()
        ),
        InlineKeyboardButton(
            text="‚úèÔ∏è –û—á–∫–∏",
            callback_data=EditCardCallback(action="edit_points", card_id=card_id, universe=universe).pack()
        ),
        InlineKeyboardButton(
            text="‚ùå –ö–∞—Ä—Ç—É",
            callback_data=EditCardCallback(action="delete", card_id=card_id, universe=universe).pack()
        )
    )

    return builder.as_markup()