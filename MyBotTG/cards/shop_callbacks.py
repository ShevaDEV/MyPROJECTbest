import os
import aiosqlite
import asyncio
from aiogram import Router, types, F
from aiogram.types import FSInputFile

shop_callbacks_router = Router()

async def get_user_data(user_id):
    """üîπ –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—á–∫–∏ + –≤—Å–µ–ª–µ–Ω–Ω–∞—è)."""
    async with aiosqlite.connect("bot_database.db") as db:
        async with db.execute("SELECT total_points, selected_universe FROM users WHERE user_id = ?", (user_id,)) as cursor:
            return await cursor.fetchone()

async def get_item_data(item_id, user_id):
    """üîπ –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ."""
    async with aiosqlite.connect("bot_database.db") as db:
        async with db.execute("SELECT item_type, item_value, price FROM user_shop WHERE item_id = ? AND user_id = ?", (item_id, user_id)) as cursor:
            return await cursor.fetchone()

async def update_user_points(user_id, amount):
    """üîπ –í—ã—á–∏—Ç–∞–µ—Ç –æ—á–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    async with aiosqlite.connect("bot_database.db") as db:
        await db.execute("UPDATE users SET total_points = total_points - ? WHERE user_id = ?", (amount, user_id))
        await db.commit()

async def delete_shop_item(item_id, user_id):
    """üîπ –£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏."""
    async with aiosqlite.connect("bot_database.db") as db:
        await db.execute("DELETE FROM user_shop WHERE item_id = ? AND user_id = ?", (item_id, user_id))
        await db.commit()

async def add_user_card(user_id, card_id, universe):
    """üîπ –î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å."""
    async with aiosqlite.connect("bot_database.db") as db:
        await db.execute("""
            INSERT INTO user_cards (user_id, card_id, universe_id, quantity)
            VALUES (?, ?, ?, 1)
            ON CONFLICT(user_id, card_id, universe_id) DO UPDATE SET quantity = quantity + 1
        """, (user_id, card_id, universe))
        await db.commit()

async def buy_spins(callback, user_id, spins, price):
    """üîπ –ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–æ–∫."""
    async with aiosqlite.connect("bot_database.db") as db:
        await db.execute("UPDATE users SET spins = spins + ?, total_points = total_points - ? WHERE user_id = ?", (spins, price, user_id))
        await db.commit()

    await callback.message.answer(f"üé∞ –í—ã –∫—É–ø–∏–ª–∏ {spins} –ø—Ä–æ–∫—Ä—É—Ç–æ–∫!")
    await callback.answer("–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=False)

async def buy_card(callback, user_id, selected_universe, rarity, price):
    """üîπ –ü–æ–∫—É–ø–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç—å—é."""
    async with aiosqlite.connect("bot_database.db") as db:
        async with db.execute(f"""
            SELECT card_id, name, photo_path, rarity, points
            FROM [{selected_universe}]
            WHERE rarity = ?
            ORDER BY RANDOM()
            LIMIT 1
        """, (rarity,)) as cursor:
            card = await cursor.fetchone()

    if not card:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
        return

    card_id, card_name, photo_path, rarity, points = card
    await add_user_card(user_id, card_id, selected_universe)
    await update_user_points(user_id, price)

    if not os.path.isfile(photo_path):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    photo_file = await asyncio.to_thread(FSInputFile, photo_path)

    await callback.message.answer_photo(
        photo=photo_file,
        caption=f"üìú –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç—É:\nüè∑Ô∏è *{card_name}*\nüé≤ *{rarity.capitalize()}*\nüíé *{points}*",
        parse_mode="Markdown"
    )

async def buy_specific_card(callback, user_id, selected_universe, card_id, price):
    """üîπ –ü–æ–∫—É–ø–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã."""
    async with aiosqlite.connect("bot_database.db") as db:
        async with db.execute(f"""
            SELECT card_id, name, photo_path, rarity, points
            FROM [{selected_universe}]
            WHERE card_id = ?
        """, (card_id,)) as cursor:
            card = await cursor.fetchone()

    if not card:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    card_id, card_name, photo_path, rarity, points = card
    await add_user_card(user_id, card_id, selected_universe)
    await update_user_points(user_id, price)

    if not os.path.isfile(photo_path):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    photo_file = await asyncio.to_thread(FSInputFile, photo_path)

    await callback.message.answer_photo(
        photo=photo_file,
        caption=f"üìú –í—ã –∫—É–ø–∏–ª–∏ –∫–∞—Ä—Ç—É:\nüè∑Ô∏è *{card_name}*\nüé≤ *{rarity.capitalize()}*\nüíé *{points}*",
        parse_mode="Markdown"
    )

@shop_callbacks_router.callback_query(F.data.startswith("buy_"))
async def handle_purchase(callback: types.CallbackQuery):
    """üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ."""
    user_id = callback.from_user.id
    item_id = int(callback.data.split("_")[1])

    user_data = await get_user_data(user_id)
    if not user_data:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", show_alert=True)
        return

    total_points, selected_universe = user_data
    if not selected_universe:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ–ª–µ–Ω–Ω—É—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /select_universe.", show_alert=True)
        return

    item_data = await get_item_data(item_id, user_id)
    if not item_data:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∫—É–ø–ª–µ–Ω.", show_alert=True)
        return

    item_type, item_value, price = item_data

    if total_points < price:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤.", show_alert=True)
        return

    if item_type == "spins":
        await buy_spins(callback, user_id, int(item_value), price)

    elif item_type == "rarity_guarantee":
        await buy_card(callback, user_id, selected_universe, item_value, price)

    elif item_type == "specific_card":
        await buy_specific_card(callback, user_id, selected_universe, item_value, price)

    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞.", show_alert=True)
        return

    await delete_shop_item(item_id, user_id)
    await callback.message.edit_text("üõí –í–∞—à –º–∞–≥–∞–∑–∏–Ω –æ–±–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /shop –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞.")
