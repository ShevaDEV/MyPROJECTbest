from aiogram import Router, types, F
import sqlite3
import os
from aiogram.types import FSInputFile

shop_callbacks_router = Router()

@shop_callbacks_router.callback_query(F.data.startswith("buy_"))
async def handle_purchase(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    item_id = int(callback.data.split("_")[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data

    with sqlite3.connect("bot_database.db") as conn:
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        cursor.execute("SELECT total_points, selected_universe FROM users WHERE user_id = ?", (user_id,))
        user_data = cursor.fetchone()
        if not user_data:
            await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.", show_alert=True)
            return

        total_points, selected_universe = user_data
        if not selected_universe:
            await callback.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ–ª–µ–Ω–Ω—É—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /selectuniverse –¥–ª—è –≤—ã–±–æ—Ä–∞.", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        cursor.execute("SELECT item_type, item_value, price FROM user_shop WHERE item_id = ? AND user_id = ?", (item_id, user_id))
        item_data = cursor.fetchone()
        if not item_data:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∫—É–ø–ª–µ–Ω.", show_alert=True)
            return

        item_type, item_value, price = item_data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –æ—á–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if total_points < price:
            await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.", show_alert=True)
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
        if item_type == "spins":
            # –ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–æ–∫
            cursor.execute("UPDATE users SET spins = spins + ?, total_points = total_points - ? WHERE user_id = ?", (int(item_value), price, user_id))
            conn.commit()
            await callback.message.answer(f"üé∞ –í—ã –∫—É–ø–∏–ª–∏ {item_value} –ø—Ä–æ–∫—Ä—É—Ç–æ–∫!")

        elif item_type == "rarity_guarantee":
            # –ü–æ–∫—É–ø–∫–∞ –≥–∞—Ä–∞–Ω—Ç–∞ –Ω–∞ —Ä–µ–¥–∫–æ—Å—Ç—å
            cursor.execute(f"""
                SELECT card_id, name, photo_path, rarity, points
                FROM [{selected_universe}]
                WHERE rarity = ?
                ORDER BY RANDOM()
                LIMIT 1
            """, (item_value,))
            card = cursor.fetchone()
            if card:
                card_id, card_name, photo_path, rarity, points = card
                cursor.execute("""
                    INSERT INTO user_cards (user_id, card_id, universe, quantity)
                    VALUES (?, ?, ?, 1)
                    ON CONFLICT(user_id, card_id, universe) DO UPDATE SET quantity = quantity + 1
                """, (user_id, card_id, selected_universe))
                cursor.execute("UPDATE users SET total_points = total_points - ? WHERE user_id = ?", (price, user_id))
                conn.commit()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if not os.path.isfile(photo_path):
                    await callback.answer("–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
                    return

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–∞–≤—à–µ–π –∫–∞—Ä—Ç–µ
                photo_file = FSInputFile(photo_path)
                await callback.message.answer_photo(
                    photo=photo_file,
                    caption=(
                        f"üìú –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç—É:\n"
                        f"üè∑Ô∏è –ò–º—è: *{card_name}*\n"
                        f"üé≤ –†–µ–¥–∫–æ—Å—Ç—å: *{rarity.capitalize()}*\n"
                        f"üéñÔ∏è –¶–µ–Ω–Ω–æ—Å—Ç—å: *{points} –æ—á–∫–æ–≤*"
                    ),
                    parse_mode="Markdown"
                )
            else:
                await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç—É –¥–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
                return

        elif item_type == "specific_card":
            # –ü–æ–∫—É–ø–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã
            cursor.execute(f"""
                SELECT card_id, name, photo_path, rarity, points
                FROM [{selected_universe}]
                WHERE card_id = ?
            """, (item_value,))
            card = cursor.fetchone()
            if card:
                card_id, card_name, photo_path, rarity, points = card
                cursor.execute("""
                    INSERT INTO user_cards (user_id, card_id, universe, quantity)
                    VALUES (?, ?, ?, 1)
                    ON CONFLICT(user_id, card_id, universe) DO UPDATE SET quantity = quantity + 1
                """, (user_id, card_id, selected_universe))
                cursor.execute("UPDATE users SET total_points = total_points - ? WHERE user_id = ?", (price, user_id))
                conn.commit()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if not os.path.isfile(photo_path):
                    await callback.answer("–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
                    return

                photo_file = FSInputFile(photo_path)
                await callback.message.answer_photo(
                    photo=photo_file,
                    caption=(
                        f"üìú –í—ã –∫—É–ø–∏–ª–∏ –∫–∞—Ä—Ç—É:\n"
                        f"üè∑Ô∏è –ò–º—è: *{card_name}*\n"
                        f"üé≤ –†–µ–¥–∫–æ—Å—Ç—å: *{rarity.capitalize()}*\n"
                        f"üéñÔ∏è –¶–µ–Ω–Ω–æ—Å—Ç—å: *{points} –æ—á–∫–æ–≤*"
                    ),
                    parse_mode="Markdown"
                )
        else:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞.", show_alert=True)
            return

        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("DELETE FROM user_shop WHERE item_id = ? AND user_id = ?", (item_id, user_id))
        conn.commit()

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
        await callback.answer("–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=False)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    await callback.message.edit_text("üõí –í–∞—à –º–∞–≥–∞–∑–∏–Ω –æ–±–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /shop –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.")
