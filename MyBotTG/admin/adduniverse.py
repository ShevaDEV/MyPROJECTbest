from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove
import aiosqlite
from config import OWNER_ID

adduniverse_router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–ª–µ–Ω–Ω–æ–π
class AddUniverseStates(StatesGroup):
    waiting_for_universe_name = State()

async def add_universe(universe_id: str, name: str) -> bool:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    async with aiosqlite.connect("bot_database.db") as db:
        await db.execute("PRAGMA foreign_keys = ON")  # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è
        async with db.execute("SELECT universe_id FROM universes WHERE universe_id = ?", (universe_id,)) as cursor:
            if await cursor.fetchone():
                return False  # –í—Å–µ–ª–µ–Ω–Ω–∞—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ–ª–µ–Ω–Ω—É—é
        await db.execute(
            "INSERT INTO universes (universe_id, name, enabled) VALUES (?, ?, ?)",
            (universe_id, name, 0)
        )

        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–∞—Ä—Ç —ç—Ç–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π
        await db.execute(f"""
        CREATE TABLE IF NOT EXISTS [{universe_id}] (
            card_id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            photo_path TEXT,
            rarity TEXT,
            attack INTEGER,
            hp INTEGER,
            points INTEGER DEFAULT 0
        )
        """)

        await db.commit()
        return True

@adduniverse_router.message(Command("add_universe"))
async def start_add_universe(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–ª–µ–Ω–Ω–æ–π."""
    if message.from_user.id != OWNER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å–µ–ª–µ–Ω–Ω–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, DC Comics):\n"
        "‚ùå –û—Ç–º–µ–Ω–∞: /cancel",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AddUniverseStates.waiting_for_universe_name)

@adduniverse_router.message(Command("cancel"), AddUniverseStates.waiting_for_universe_name)
async def cancel_add_universe(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–ª–µ–Ω–Ω–æ–π."""
    await state.clear()
    await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@adduniverse_router.message(AddUniverseStates.waiting_for_universe_name, F.text)
async def process_universe_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ—ë –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–≤—ë–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—É /cancel –≤—Ä—É—á–Ω—É—é
    if message.text.strip().lower() == "/cancel":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    universe_name = message.text.strip()
    universe_id = universe_name.lower().replace(" ", "_")

    if await add_universe(universe_id, universe_name):
        await message.answer(f"‚úÖ –í—Å–µ–ª–µ–Ω–Ω–∞—è ¬´{universe_name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞!\nID: `{universe_id}`", parse_mode="Markdown")
    else:
        await message.answer(f"‚ùå –í—Å–µ–ª–µ–Ω–Ω–∞—è ¬´{universe_name}¬ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

    await state.clear()
