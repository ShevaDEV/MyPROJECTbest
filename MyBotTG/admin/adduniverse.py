from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove
import sqlite3
from config import OWNER_ID

adduniverse_router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–ª–µ–Ω–Ω–æ–π
class AddUniverseStates(StatesGroup):
    waiting_for_universe_name = State()

def add_universe(universe_id: str, name: str) -> bool:
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Å–µ–ª–µ–Ω–Ω–æ–π
    cursor.execute("SELECT universe_id FROM universes WHERE universe_id = ?", (universe_id,))
    if cursor.fetchone():
        conn.close()
        return False

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–ª–µ–Ω–Ω–æ–π
    cursor.execute(
        "INSERT INTO universes (universe_id, name, enabled) VALUES (?, ?, ?)",
        (universe_id, name, 0)
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–∞—Ä—Ç
    cursor.execute(f"""
    CREATE TABLE IF NOT EXISTS [{universe_id}] (
        card_id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        photo_path TEXT,
        rarity TEXT,
        attack INTEGER,
        hp INTEGER,
        points INTEGER DEFAULT 0
    )
    """)
    
    conn.commit()
    conn.close()
    return True

@adduniverse_router.message(Command("add_universe"))
async def start_add_universe(message: types.Message, state: FSMContext):
    if message.from_user.id != OWNER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å–µ–ª–µ–Ω–Ω–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, DC Comics):\n"
        "‚ùå –û—Ç–º–µ–Ω–∞: /cancel",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AddUniverseStates.waiting_for_universe_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –î–û –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
@adduniverse_router.message(Command("cancel"), AddUniverseStates.waiting_for_universe_name)
async def cancel_add_universe(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@adduniverse_router.message(AddUniverseStates.waiting_for_universe_name, F.text)
async def process_universe_name(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ /cancel –≤ —Ç–µ–∫—Å—Ç–µ (–µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞)
    if message.text.strip().lower() == "/cancel":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    universe_name = message.text.strip()
    universe_id = universe_name.lower().replace(" ", "_")

    if add_universe(universe_id, universe_name):
        await message.answer(f"‚úÖ –í—Å–µ–ª–µ–Ω–Ω–∞—è ¬´{universe_name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞!\nID: `{universe_id}`", parse_mode="Markdown")
    else:
        await message.answer(f"‚ùå –í—Å–µ–ª–µ–Ω–Ω–∞—è ¬´{universe_name}¬ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

    await state.clear()