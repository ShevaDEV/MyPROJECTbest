from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove
import aiosqlite
from config import OWNER_ID

universecheck_router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–ª–µ–Ω–Ω—ã–º–∏
class ToggleUniverseStates(StatesGroup):
    waiting_for_universe_id = State()

async def enable_universe(universe_id: str):
    """üîπ –í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ–ª–µ–Ω–Ω—É—é (–¥–µ–ª–∞–µ—Ç enabled = 1)."""
    async with aiosqlite.connect("bot_database.db") as db:
        await db.execute("UPDATE universes SET enabled = 1 WHERE universe_id = ?", (universe_id,))
        await db.commit()

async def disable_universe(universe_id: str):
    """üîπ –û—Ç–∫–ª—é—á–∞–µ—Ç –≤—Å–µ–ª–µ–Ω–Ω—É—é (–¥–µ–ª–∞–µ—Ç enabled = 0)."""
    async with aiosqlite.connect("bot_database.db") as db:
        await db.execute("UPDATE universes SET enabled = 0 WHERE universe_id = ?", (universe_id,))
        await db.commit()

async def get_universe_status(universe_id: str) -> bool:
    """üîπ –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ–ª–µ–Ω–Ω–æ–π (–≤–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç)."""
    async with aiosqlite.connect("bot_database.db") as db:
        async with db.execute("SELECT enabled FROM universes WHERE universe_id = ?", (universe_id,)) as cursor:
            result = await cursor.fetchone()
            return result[0] if result else None

@universecheck_router.message(Command("toggle_universe"))
async def start_toggle_universe(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ–ª–µ–Ω–Ω–æ–π."""
    if message.from_user.id != OWNER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    await message.answer(
        "üîß –í–≤–µ–¥–∏—Ç–µ ID –≤—Å–µ–ª–µ–Ω–Ω–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, `marvel`):\n"
        "‚ùå –û—Ç–º–µ–Ω–∞: /cancel",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="Markdown"
    )
    await state.set_state(ToggleUniverseStates.waiting_for_universe_id)

@universecheck_router.message(Command("cancel"), ToggleUniverseStates.waiting_for_universe_id)
async def cancel_toggle_universe(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ–ª–µ–Ω–Ω–æ–π."""
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@universecheck_router.message(ToggleUniverseStates.waiting_for_universe_id, F.text)
async def process_toggle_universe(message: types.Message, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ–ª–µ–Ω–Ω–æ–π (–≤–∫–ª—é—á–∞–µ—Ç/–æ—Ç–∫–ª—é—á–∞–µ—Ç)."""
    if message.text.strip().lower() == "/cancel":
        await state.clear()
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    universe_id = message.text.strip().lower().replace(" ", "_")
    current_status = await get_universe_status(universe_id)

    if current_status is None:
        await message.answer(f"‚ùå –í—Å–µ–ª–µ–Ω–Ω–∞—è —Å ID `{universe_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", parse_mode="Markdown")
        await state.clear()
        return

    new_status = not current_status
    if new_status:
        await enable_universe(universe_id)
        status_text = "–≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ"
    else:
        await disable_universe(universe_id)
        status_text = "–æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚ùå"

    await message.answer(f"‚úÖ –í—Å–µ–ª–µ–Ω–Ω–∞—è `{universe_id}` {status_text}.", parse_mode="Markdown")
    await state.clear()

@universecheck_router.message(Command("list_universes"))
async def list_universes_command(message: types.Message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏."""
    async with aiosqlite.connect("bot_database.db") as db:
        async with db.execute("SELECT universe_id, name, enabled FROM universes") as cursor:
            universes = await cursor.fetchall()

    if not universes:
        await message.answer("üìÇ –°–ø–∏—Å–æ–∫ –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É—Å—Ç.")
        return

    response = "üåå **–°–ø–∏—Å–æ–∫ –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö:**\n\n"
    for universe_id, name, enabled in universes:
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"
        response += f"{status}\n**ID:** `{universe_id}`\n**–ù–∞–∑–≤–∞–Ω–∏–µ:** {name}\n\n"

    await message.answer(response, parse_mode="Markdown")
