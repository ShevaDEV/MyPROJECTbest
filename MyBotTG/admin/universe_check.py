from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove
import sqlite3
from config import OWNER_ID

universecheck_router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–ª–µ–Ω–Ω—ã–º–∏
class ToggleUniverseStates(StatesGroup):
    waiting_for_universe_id = State()

def enable_universe(universe_id: str):
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE universes SET enabled = 1 WHERE universe_id = ?", (universe_id,))
    conn.commit()
    conn.close()

def disable_universe(universe_id: str):
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE universes SET enabled = 0 WHERE universe_id = ?", (universe_id,))
    conn.commit()
    conn.close()

def get_universe_status(universe_id: str) -> bool:
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT enabled FROM universes WHERE universe_id = ?", (universe_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

@universecheck_router.message(Command("toggle_universe"))
async def start_toggle_universe(message: types.Message, state: FSMContext):
    if message.from_user.id != OWNER_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    await message.answer(
        "üîß –í–≤–µ–¥–∏—Ç–µ ID –≤—Å–µ–ª–µ–Ω–Ω–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, `marvel`):\n"
        "‚ùå –û—Ç–º–µ–Ω–∞: /cancel",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="Markdown"
    )
    await state.set_state(ToggleUniverseStates.waiting_for_universe_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –î–û –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
@universecheck_router.message(Command("cancel"), ToggleUniverseStates.waiting_for_universe_id)
async def cancel_toggle_universe(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@universecheck_router.message(ToggleUniverseStates.waiting_for_universe_id, F.text)
async def process_toggle_universe(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ /cancel –≤ —Ç–µ–∫—Å—Ç–µ (–µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞)
    if message.text.strip().lower() == "/cancel":
        await state.clear()
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    universe_id = message.text.strip().lower().replace(" ", "_")
    current_status = get_universe_status(universe_id)

    if current_status is None:
        await message.answer(f"‚ùå –í—Å–µ–ª–µ–Ω–Ω–∞—è —Å ID `{universe_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        await state.clear()
        return

    new_status = not current_status
    if new_status:
        enable_universe(universe_id)
        status_text = "–≤–∫–ª—é—á–µ–Ω–∞"
    else:
        disable_universe(universe_id)
        status_text = "–æ—Ç–∫–ª—é—á–µ–Ω–∞"

    await message.answer(f"‚úÖ –í—Å–µ–ª–µ–Ω–Ω–∞—è `{universe_id}` {status_text}.")
    await state.clear()

@universecheck_router.message(Command("list_universes"))
async def list_universes_command(message: types.Message):
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT universe_id, name, enabled FROM universes")
    universes = cursor.fetchall()
    conn.close()

    if not universes:
        await message.answer("üìÇ –°–ø–∏—Å–æ–∫ –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É—Å—Ç.")
        return

    response = "üåå –°–ø–∏—Å–æ–∫ –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö:\n\n"
    for universe_id, name, enabled in universes:
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"
        response += f"{status}\nID: `{universe_id}`\n–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n\n"

    await message.answer(response, parse_mode="Markdown")