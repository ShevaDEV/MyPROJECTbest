from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile, InputMediaPhoto
from handlers.cardshand.callbackcards import RarityCallback, ReturnCallback
from kbds.inlinecards import rarity_keyboard_for_user, pagination_keyboard
import sqlite3
import os

cardsall_router = Router()

@cardsall_router.message(Command("cards"))
@cardsall_router.message(F.text.lower() == "–º–æ–∏ –∫–∞—Ä—Ç—ã")
@cardsall_router.callback_query(lambda c: c.data == "view_cards")
async def show_user_cards(event: types.Message | types.CallbackQuery):
    user_id = event.from_user.id if isinstance(event, types.Message) else event.message.chat.id

    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤—Å–µ–ª–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT selected_universe FROM users WHERE user_id = ?", (user_id,))
    selected_universe = cursor.fetchone()

    if not selected_universe or not selected_universe[0]:
        await (event.answer if isinstance(event, types.CallbackQuery) else event.reply)(
            "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ–ª–µ–Ω–Ω—É—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /selectuniverse –¥–ª—è –≤—ã–±–æ—Ä–∞."
        )
        conn.close()
        return

    selected_universe = selected_universe[0]

    # –°—á–∏—Ç–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
    cursor.execute(f"""
    SELECT c.rarity, COUNT(uc.card_id)
    FROM user_cards uc
    JOIN [{selected_universe}] c ON uc.card_id = c.card_id
    WHERE uc.user_id = ?
    GROUP BY c.rarity
    """, (user_id,))
    user_cards = {row[0]: row[1] for row in cursor.fetchall()}

    # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –≤ –±–∞–∑–µ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
    cursor.execute(f"""
    SELECT rarity, COUNT(card_id)
    FROM [{selected_universe}]
    GROUP BY rarity
    """)
    total_cards = {row[0]: row[1] for row in cursor.fetchall()}

    conn.close()

    # –ï—Å–ª–∏ –∫–∞—Ä—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç
    if not user_cards:
        await (event.answer if isinstance(event, types.CallbackQuery) else event.reply)(
            f"–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π '{selected_universe.capitalize()}' —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç."
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∫–æ—Å—Ç–µ–π
    keyboard = rarity_keyboard_for_user(user_cards=user_cards, total_cards=total_cards, universe=selected_universe)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Å–µ–ª–µ–Ω–Ω–æ–π
    message_text = f"–ö–∞–∫–∏–µ –∫–∞—Ä—Ç—ã –∏–∑ –≤—Å–µ–ª–µ–Ω–Ω–æ–π {selected_universe.capitalize()} —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?"

    if isinstance(event, types.CallbackQuery):
        await event.message.edit_text(message_text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await event.reply(message_text, reply_markup=keyboard, parse_mode="Markdown")


@cardsall_router.callback_query(RarityCallback.filter())
async def show_cards_by_rarity(callback: types.CallbackQuery, callback_data: RarityCallback):
    user_id = callback.from_user.id
    rarity = callback_data.rarity_type
    universe = callback_data.universe

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∫–æ—Å—Ç–∏
    valid_rarities = ["–æ–±—ã—á–Ω–∞—è", "—Ä–µ–¥–∫–∞—è", "—ç–ø–∏—á–µ—Å–∫–∞—è", "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", "–º–∏—Ñ–∏—á–µ—Å–∫–∞—è"]
    if rarity not in valid_rarities:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–µ–¥–∫–æ—Å—Ç–∏.", show_alert=True)
        return

    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π
    cursor.execute(f"""
    SELECT c.card_id, c.name, c.photo_path, c.rarity, c.points
    FROM user_cards uc
    JOIN [{universe}] c ON uc.card_id = c.card_id
    WHERE uc.user_id = ? AND c.rarity = ?
    """, (user_id, rarity))

    cards = cursor.fetchall()
    conn.close()

    if not cards:
        # –ï—Å–ª–∏ –∫–∞—Ä—Ç –Ω–µ—Ç, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–í–µ—Ä–Ω—É—Ç—å—Å—è"
        await callback.message.edit_text(
            f"–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏: {rarity.capitalize()}.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=ReturnCallback(action="to_categories").pack())]
            ])
        )
        return

    # –ï—Å–ª–∏ –∫–∞—Ä—Ç—ã –µ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã
    card_id, name, photo_path, rarity, points = cards[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not os.path.isfile(photo_path):
        await callback.message.edit_text(
            f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞—Ä—Ç—ã '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=ReturnCallback(action="to_categories").pack())]
            ])
        )
        return

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–∞—Ä—Ç–µ
    media = InputMediaPhoto(
        media=FSInputFile(photo_path),
    caption = (
        f"üÉè *–ö–∞—Ä—Ç–∞*: ¬´*{name}*¬ª\n"
        f"üé≤ *–†–µ–¥–∫–æ—Å—Ç—å*: *{rarity.capitalize()}*\n"
        f"üíé *–û—á–∫–∏*: *{points}*"
    ),
        parse_mode="Markdown"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    reply_markup = pagination_keyboard(rarity=rarity, index=0, total=len(cards), include_return=True)

    await callback.message.edit_media(
        media=media,
        reply_markup=reply_markup
    )


@cardsall_router.callback_query(ReturnCallback.filter(F.action == "to_categories"))
async def return_to_categories(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤—Å–µ–ª–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT selected_universe FROM users WHERE user_id = ?", (user_id,))
    selected_universe = cursor.fetchone()

    if not selected_universe or not selected_universe[0]:
        await callback.message.delete()
        await callback.message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ–ª–µ–Ω–Ω—É—é!")
        conn.close()
        return

    selected_universe = selected_universe[0]

    # –°—á–∏—Ç–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
    cursor.execute(f"""
    SELECT c.rarity, COUNT(uc.card_id)
    FROM user_cards uc
    JOIN [{selected_universe}] c ON uc.card_id = c.card_id
    WHERE uc.user_id = ?
    GROUP BY c.rarity
    """, (user_id,))
    user_cards = {row[0]: row[1] for row in cursor.fetchall()}

    # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –≤ –±–∞–∑–µ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
    cursor.execute(f"""
    SELECT rarity, COUNT(card_id)
    FROM [{selected_universe}]
    GROUP BY rarity
    """)
    total_cards = {row[0]: row[1] for row in cursor.fetchall()}

    conn.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∫–æ—Å—Ç–µ–π
    keyboard = rarity_keyboard_for_user(user_cards=user_cards, total_cards=total_cards, universe=selected_universe)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Å–µ–ª–µ–Ω–Ω–æ–π
    message_text = f"–ö–∞–∫–∏–µ –∫–∞—Ä—Ç—ã –∏–∑ –≤—Å–µ–ª–µ–Ω–Ω–æ–π {selected_universe.capitalize()} —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?"

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await callback.message.delete()
    await callback.message.answer(message_text, reply_markup=keyboard, parse_mode="Markdown")
