from aiogram import Router, types, F
from aiogram.filters import Command
from datetime import datetime, timedelta
from random import choices
import os
from aiogram.types import FSInputFile
from config import OWNER_ID
from dabase.database import db_instance  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º db_instance

cardreceive_router = Router()

# –í–µ—Å —Ä–µ–¥–∫–æ—Å—Ç–µ–π –∫–∞—Ä—Ç
RARITY_WEIGHTS = {
    "–æ–±—ã—á–Ω–∞—è": 50,
    "—Ä–µ–¥–∫–∞—è": 30,
    "—ç–ø–∏—á–µ—Å–∫–∞—è": 15,
    "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": 4,
    "–º–∏—Ñ–∏—á–µ—Å–∫–∞—è": 1
}

# –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∫–∞—Ä—Ç (–≤ —á–∞—Å–∞—Ö)
CARD_RECEIVE_COOLDOWN = 4


def get_random_card(cards: list) -> dict:
    """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É —Å —É—á–µ—Ç–æ–º —Ä–µ–¥–∫–æ—Å—Ç–∏."""
    rarities = [card[2] for card in cards]  # ‚úÖ –¢–µ–ø–µ—Ä—å –±–µ—Ä—ë–º —Ä–µ–¥–∫–æ—Å—Ç—å –∏–∑ tuple
    weights = [RARITY_WEIGHTS.get(rarity, 1) for rarity in rarities]
    return choices(cards, weights=weights, k=1)[0]


async def check_cooldown(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–µ–π—Å—Ç–≤—É–µ—Ç –ª–∏ –∫—É–ª–¥–∞—É–Ω."""
    db = await db_instance.get_connection()
    async with db.execute("SELECT last_card_time FROM users WHERE user_id = ?", (user_id,)) as cursor:
        result = await cursor.fetchone()

    if result and result[0]:  # ‚úÖ –¢–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        last_time = datetime.strptime(result[0], "%Y-%m-%d %H:%M:%S")
        return datetime.now() - last_time < timedelta(hours=CARD_RECEIVE_COOLDOWN)

    return False


@cardreceive_router.message(Command("card"))
@cardreceive_router.message(F.text.lower() == "–¥–∞–π –∫–∞—Ä—Ç—É")
async def give_card(message: types.Message):
    user_id = message.from_user.id
    db = await db_instance.get_connection()

    async with db.execute("SELECT spins FROM users WHERE user_id = ?", (user_id,)) as cursor:
        result = await cursor.fetchone()

    spins = result[0] if result else 0  # ‚úÖ –¢–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

    if spins > 0:
        await db.execute("UPDATE users SET spins = spins - 1 WHERE user_id = ?", (user_id,))
        await db.commit()
    else:
        if await check_cooldown(user_id):
            async with db.execute("SELECT last_card_time FROM users WHERE user_id = ?", (user_id,)) as cursor:
                result = await cursor.fetchone()

            last_time = datetime.strptime(result[0], "%Y-%m-%d %H:%M:%S") if result else datetime.now()
            next_available_time = last_time + timedelta(hours=CARD_RECEIVE_COOLDOWN)
            time_remaining = next_available_time - datetime.now()

            hours, remainder = divmod(time_remaining.seconds, 3600)
            minutes, _ = divmod(remainder, 60)

            await message.answer(
                f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –∫–∞—Ä—Ç—É! –°–ª–µ–¥—É—é—â–∞—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {hours} —á–∞—Å(–∞) –∏ {minutes} –º–∏–Ω—É—Ç(—ã)."
            )
            return

    async with db.execute("SELECT selected_universe FROM users WHERE user_id = ?", (user_id,)) as cursor:
        universe_result = await cursor.fetchone()

    if not universe_result or not universe_result[0]:  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        await message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ–ª–µ–Ω–Ω—É—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /select_universe –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        return

    selected_universe = universe_result[0]  # ‚úÖ –î–æ—Å—Ç–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ tuple

    async with db.execute(f"SELECT card_id, name, rarity, photo_path, points FROM [{selected_universe}]") as cursor:
        cards = await cursor.fetchall()

    if not cards:
        await message.answer(f"–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {selected_universe.capitalize()} –Ω–µ—Ç –∫–∞—Ä—Ç.")
        return

    card = get_random_card(cards)

    if not os.path.isfile(card[3]):  # ‚úÖ –ë–µ—Ä—ë–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –∏–∑ tuple
        await message.answer(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {card[3]}.")
        return

    async with db.execute("""
        SELECT quantity FROM user_cards WHERE user_id = ? AND card_id = ? AND universe_id = ?
    """, (user_id, card[0], selected_universe)) as cursor:
        result = await cursor.fetchone()

    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    if result:
        await db.execute("UPDATE users SET total_points = total_points + ? WHERE user_id = ?", (card[4], user_id))
        await db.execute("UPDATE users SET last_card_time = ? WHERE user_id = ?", (now, user_id))
    else:
        await db.execute("""
            INSERT INTO user_cards (user_id, card_id, universe_id, quantity)
            VALUES (?, ?, ?, 1)
        """, (user_id, card[0], selected_universe))

        await db.execute("UPDATE users SET total_points = total_points + ? WHERE user_id = ?", (card[4], user_id))
        await db.execute("UPDATE users SET last_card_time = ? WHERE user_id = ?", (now, user_id))

    await db.commit()

    caption = (
        f"üéâ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–∏–ª–∞—Å—å –∫–∞—Ä—Ç–æ—á–∫–æ–π ¬´*{card[1]}*¬ª!\n\n"
        f"üé≤ –†–µ–¥–∫–æ—Å—Ç—å: {card[2].capitalize()}\n"
        f"üíé –û—á–∫–∏: {card[4]}\n\n"
        f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–∫—Ä—É—Ç–æ–∫: {spins - 1 if spins > 0 else 0}"
    ) if not result else (
        f"üéâ –í–∞–º –≤—ã–ø–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ ¬´*{card[1]}*¬ª!\n"
        f"üé≤ –†–µ–¥–∫–æ—Å—Ç—å: {card[2].capitalize()}\n"
        f"üíé –û—á–∫–∏: +{card[4]} –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –≤–∞—à–µ–º—É —Å—á—ë—Ç—É.\n\n"
        f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–∫—Ä—É—Ç–æ–∫: {spins - 1 if spins > 0 else 0}"
    )

    await message.answer_photo(
        photo=FSInputFile(card[3]),
        caption=caption,
        parse_mode="Markdown"
    )


@cardreceive_router.message(Command("giveadmcard"))
async def give_admin_card(message: types.Message):
    if message.from_user.id != OWNER_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    db = await db_instance.get_connection()

    async with db.execute("SELECT selected_universe FROM users WHERE user_id = ?", (OWNER_ID,)) as cursor:
        selected_universe = (await cursor.fetchone())[0]

    async with db.execute(f"SELECT card_id, name, rarity, photo_path, points FROM [{selected_universe}]") as cursor:
        cards = await cursor.fetchall()

    if not cards:
        await message.answer(f"‚ö† –ù–µ—Ç –∫–∞—Ä—Ç –≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π {selected_universe.capitalize()}.")
        return

    card = get_random_card(cards)

    await db.execute("""
        INSERT INTO user_cards (user_id, card_id, universe_id, quantity)
        VALUES (?, ?, ?, 1)
        ON CONFLICT(user_id, card_id, universe_id) DO UPDATE SET quantity = quantity + 1
    """, (message.from_user.id, card[0], selected_universe))

    await db.commit()

    await message.answer_photo(
        photo=FSInputFile(card[3]),
        caption=(
            f"‚úÖ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç—É!*\n\n"
            f"üÉè *–ö–∞—Ä—Ç–∞:* {card[1]}\n"
            f"üé≤ *–†–µ–¥–∫–æ—Å—Ç—å:* {card[2].capitalize()}\n"
            f"üíé *–û—á–∫–∏:* {card[4]}\n\n"
            f"üì¶ *–î–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é!*"
        ),
        parse_mode="Markdown"
    )
