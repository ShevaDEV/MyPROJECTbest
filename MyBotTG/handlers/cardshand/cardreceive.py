from aiogram import Router, types, F
from aiogram.filters import Command
from datetime import datetime, timedelta
from random import choices
import sqlite3
import os
from aiogram.types import FSInputFile
from config import OWNER_ID

cardreceive_router = Router()

# –í–µ—Å —Ä–µ–¥–∫–æ—Å—Ç–µ–π –∫–∞—Ä—Ç
RARITY_WEIGHTS = {
    "–æ–±—ã—á–Ω–∞—è": 50,
    "—Ä–µ–¥–∫–∞—è": 30,
    "—ç–ø–∏—á–µ—Å–∫–∞—è": 15,
    "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": 4,
    "–º–∏—Ñ–∏—á–µ—Å–∫–∞—è": 1
}

# –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∫–∞—Ä—Ç (–≤ —á–∞—Å–∞—Ö)
CARD_RECEIVE_COOLDOWN = 4


def get_random_card(cards: list) -> tuple:
    """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É —Å —É—á–µ—Ç–æ–º —Ä–µ–¥–∫–æ—Å—Ç–∏."""
    rarities = [card[2] for card in cards]
    weights = [RARITY_WEIGHTS[rarity] for rarity in rarities]
    return choices(cards, weights=weights, k=1)[0]


async def check_cooldown(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–µ–π—Å—Ç–≤—É–µ—Ç –ª–∏ –∫—É–ª–¥–∞—É–Ω."""
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    cursor.execute("SELECT last_card_time FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()

    if result and result[0]:
        last_time = datetime.strptime(result[0], "%Y-%m-%d %H:%M:%S")
        time_diff = datetime.now() - last_time
        return time_diff < timedelta(hours=CARD_RECEIVE_COOLDOWN)
    return False


@cardreceive_router.message(Command("givecard"))
@cardreceive_router.message(F.text.lower() == "–¥–∞–π –∫–∞—Ä—Ç—É")
async def give_card(message: types.Message):
    user_id = message.from_user.id

    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    cursor.execute("SELECT spins FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    spins = result[0] if result else 0

    if spins > 0:
        cursor.execute("UPDATE users SET spins = spins - 1 WHERE user_id = ?", (user_id,))
        conn.commit()
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        cursor.execute("SELECT last_card_time FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        if result and result[0]:
            last_time = datetime.strptime(result[0], "%Y-%m-%d %H:%M:%S")
            next_available_time = last_time + timedelta(hours=CARD_RECEIVE_COOLDOWN)
            time_remaining = next_available_time - datetime.now()

            if time_remaining > timedelta(0):
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
                hours, remainder = divmod(time_remaining.seconds, 3600)
                minutes, _ = divmod(remainder, 60)
                await message.answer(
                    f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –∫–∞—Ä—Ç—É! –°–ª–µ–¥—É—é—â–∞—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {hours} —á–∞—Å(–∞) –∏ {minutes} –º–∏–Ω—É—Ç(—ã)."
                )
                conn.close()
                return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤—Å–µ–ª–µ–Ω–Ω—É—é
    cursor.execute("SELECT selected_universe FROM users WHERE user_id = ?", (user_id,))
    universe_result = cursor.fetchone()
    if not universe_result or not universe_result[0]:
        await message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ–ª–µ–Ω–Ω—É—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /selectuniverse –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        conn.close()
        return
    selected_universe = universe_result[0]

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã
    cursor.execute(f"SELECT card_id, name, rarity, photo_path, points FROM [{selected_universe}]")
    cards = cursor.fetchall()

    if not cards:
        await message.answer(f"–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {selected_universe.capitalize()} –Ω–µ—Ç –∫–∞—Ä—Ç.")
        conn.close()
        return

    # –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É
    card = get_random_card(cards)
    card_id, name, rarity, photo_path, points = card

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not os.path.isfile(photo_path):
        await message.answer(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {photo_path}.")
        conn.close()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä–∫—É
    cursor.execute("""
        SELECT quantity FROM user_cards WHERE user_id = ? AND card_id = ? AND universe = ?
    """, (user_id, card_id, selected_universe))
    result = cursor.fetchone()

    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    if result:
        cursor.execute("UPDATE users SET total_points = total_points + ? WHERE user_id = ?", (points, user_id))
        cursor.execute("UPDATE users SET last_card_time = ? WHERE user_id = ?", (now, user_id))
        conn.commit()

        await message.answer_photo(
            photo=FSInputFile(photo_path),  # –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            caption=(
                f"üéâ –í–∞–º –≤—ã–ø–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ ¬´*{name}*¬ª!\n"
                f"üé≤ –†–µ–¥–∫–æ—Å—Ç—å: {rarity.capitalize()}\n"
                f"üéñÔ∏è –û—á–∫–∏: +{points} –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –≤–∞—à–µ–º—É —Å—á—ë—Ç—É.\n\n"
                f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–∫—Ä—É—Ç–æ–∫: {spins - 1 if spins > 0 else 0}"
            ),
            parse_mode="Markdown"
        )
    else:
        cursor.execute("""
            INSERT INTO user_cards (user_id, card_id, universe, quantity)
            VALUES (?, ?, ?, 1)
        """, (user_id, card_id, selected_universe))
        cursor.execute("UPDATE users SET total_points = total_points + ? WHERE user_id = ?", (points, user_id))
        cursor.execute("UPDATE users SET last_card_time = ? WHERE user_id = ?", (now, user_id))
        conn.commit()

        await message.answer_photo(
            photo=FSInputFile(photo_path),  # –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            caption=(
                f"üéâ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–∏–ª–∞—Å—å –∫–∞—Ä—Ç–æ—á–∫–æ–π ¬´*{name}*¬ª!\n\n"
                f"üé≤ –†–µ–¥–∫–æ—Å—Ç—å: {rarity.capitalize()}\n"
                f"üéñÔ∏è –û—á–∫–∏: {points}\n\n"
                f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–∫—Ä—É—Ç–æ–∫: {spins - 1 if spins > 0 else 0}"
            ),
            parse_mode="Markdown"
        )

    conn.close()


@cardreceive_router.message(Command("giveadmcard"))
async def give_admin_card(message: types.Message):
    if message.from_user.id != OWNER_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    cursor.execute("SELECT selected_universe FROM users WHERE user_id = ?", (OWNER_ID,))
    selected_universe = cursor.fetchone()[0]

    cursor.execute(f"SELECT card_id, name, rarity, photo_path, points FROM [{selected_universe}]")
    cards = cursor.fetchall()

    if not cards:
        await message.answer(f"–ù–µ—Ç –∫–∞—Ä—Ç –≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π {selected_universe.capitalize()}.")
        conn.close()
        return

    card = get_random_card(cards)
    card_id, name, rarity, photo_path, points = card

    cursor.execute("""
        INSERT INTO user_cards (user_id, card_id, universe, quantity)
        VALUES (?, ?, ?, 1)
        ON CONFLICT(user_id, card_id, universe) DO UPDATE SET quantity = quantity + 1
    """, (message.from_user.id, card_id, selected_universe))
    conn.commit()
    conn.close()

    await message.answer_photo(
        photo=FSInputFile(photo_path),  # –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        caption=(f"–ö–∞—Ä—Ç–∞ ¬´*{name}*¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."),
        parse_mode="Markdown"
    )
