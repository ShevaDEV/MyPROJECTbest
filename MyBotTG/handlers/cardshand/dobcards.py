import os
import sqlite3
import random
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import OWNER_ID  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ OWNER_ID –∑–∞–¥–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ

dobcards_router = Router()

# –î–∏–∞–ø–∞–∑–æ–Ω—ã –æ—á–∫–æ–≤ (–ø–æ–∏–Ω—Ç–æ–≤) –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–µ–π
RARITY_POINTS = {
    "–æ–±—ã—á–Ω–∞—è": (50, 200),
    "—Ä–µ–¥–∫–∞—è": (350, 550),
    "—ç–ø–∏—á–µ—Å–∫–∞—è": (750, 1050),
    "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": (1350, 1850),
    "–º–∏—Ñ–∏—á–µ—Å–∫–∞—è": (2250, 2750),
}

# –î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –∞—Ç–∞–∫–∏ –∏ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
RARITY_RANGES = {
    "–æ–±—ã—á–Ω–∞—è": {"attack": (10, 30), "hp": (20, 50)},
    "—Ä–µ–¥–∫–∞—è": {"attack": (30, 50), "hp": (50, 80)},
    "—ç–ø–∏—á–µ—Å–∫–∞—è": {"attack": (50, 80), "hp": (80, 120)},
    "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": {"attack": (80, 120), "hp": (120, 180)},
    "–º–∏—Ñ–∏—á–µ—Å–∫–∞—è": {"attack": (120, 180), "hp": (180, 250)},
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
class AddCardState(StatesGroup):
    waiting_for_universe = State()
    waiting_for_photo = State()
    waiting_for_name = State()
    waiting_for_rarity = State()

def get_available_universes() -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    –ö–∞–∂–¥–∞—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ç–µ–∂–µ–º (universe_id, name).
    –í—ã–±–∏—Ä–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö enabled = 1.
    """
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT universe_id, name FROM universes WHERE enabled = 1")
    universes = cursor.fetchall()
    conn.close()
    return universes

def create_universe_inline_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ–ª–µ–Ω–Ω–æ–π.
    –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞: —Ç–µ–∫—Å—Ç ‚Äî name (–∫–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ), callback_data ‚Äî "universe_<universe_id>".
    """
    universes = get_available_universes()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=name.capitalize(), callback_data=f"universe_{universe_id}")]
            for universe_id, name in universes
        ]
    )
    return keyboard

@dobcards_router.message(Command("addcard"))
@dobcards_router.message(F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É")
async def add_card(message: types.Message, state: FSMContext):
    if message.from_user.id != OWNER_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    kb = create_universe_inline_keyboard()
    if not kb.inline_keyboard:
        await message.answer("–°–ø–∏—Å–æ–∫ –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É—Å—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ–ª–µ–Ω–Ω—É—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã:",
        reply_markup=kb
    )
    await state.set_state(AddCardState.waiting_for_universe)

@dobcards_router.callback_query(F.data.startswith("universe_"))
async def card_universe_received(callback: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤—Å–µ–ª–µ–Ω–Ω–æ–π (–≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ "universe_")
    universe = callback.data.split("_", 1)[1]
    available_universes = [u[0] for u in get_available_universes()]
    if universe not in available_universes:
        await callback.answer("–í—ã–±—Ä–∞–Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è.", show_alert=True)
        return

    await state.update_data(universe=universe)
    await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
    await state.set_state(AddCardState.waiting_for_photo)
    await callback.answer()

@dobcards_router.message(AddCardState.waiting_for_photo, F.photo)
async def card_photo_received(message: types.Message, state: FSMContext):
    data = await state.get_data()
    universe = data.get("universe")
    photo = message.photo[-1]

    folder_path = f"images/{universe}"
    os.makedirs(folder_path, exist_ok=True)
    file_path = f"{folder_path}/{photo.file_unique_id}.jpg"

    try:
        file = await message.bot.get_file(photo.file_id)
        await message.bot.download_file(file.file_path, destination=file_path)
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await state.update_data(photo_path=file_path)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã.")
    await state.set_state(AddCardState.waiting_for_name)

@dobcards_router.message(AddCardState.waiting_for_name)
async def card_name_received(message: types.Message, state: FSMContext):
    name = message.text.strip()
    await state.update_data(name=name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç—ã. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
        "–æ–±—ã—á–Ω–∞—è, —Ä–µ–¥–∫–∞—è, —ç–ø–∏—á–µ—Å–∫–∞—è, –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è, –º–∏—Ñ–∏—á–µ—Å–∫–∞—è."
    )
    await state.set_state(AddCardState.waiting_for_rarity)

@dobcards_router.message(AddCardState.waiting_for_rarity)
async def card_rarity_received(message: types.Message, state: FSMContext):
    rarity = message.text.lower().strip()
    if rarity not in RARITY_RANGES:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π.")
        return

    card_data = await state.get_data()
    photo_path = card_data.get("photo_path")
    name = card_data.get("name")
    universe = card_data.get("universe")

    try:
        conn = sqlite3.connect("bot_database.db")
        cursor = conn.cursor()
        cursor.execute(f"SELECT 1 FROM {universe} WHERE name = ?", (name,))
        if cursor.fetchone():
            await message.answer(
                f"–ö–∞—Ä—Ç–∞ —Å –∏–º–µ–Ω–µ–º '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤—Å–µ–ª–µ–Ω–Ω–æ–π '{universe.capitalize()}'."
            )
            conn.close()
            await state.clear()
            return

        attack = random.randint(*RARITY_RANGES[rarity]["attack"])
        hp = random.randint(*RARITY_RANGES[rarity]["hp"])
        points_range = range(RARITY_POINTS[rarity][0], RARITY_POINTS[rarity][1] + 1, 50)
        points = random.choice(points_range)

        cursor.execute(f"""
            INSERT INTO {universe} (name, photo_path, rarity, attack, hp, points)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (name, photo_path, rarity, attack, hp, points))
        conn.commit()
        conn.close()
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        await state.clear()
        return

    await message.answer(
        f"–ö–∞—Ä—Ç–∞ '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É '{universe.capitalize()}'!\n\n"
        f"üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
        f"üé≤ –†–µ–¥–∫–æ—Å—Ç—å: {rarity.capitalize()}\n"
        f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {attack}\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {hp}\n"
        f"üéñÔ∏è –û—á–∫–∏: {points} points"
    )
    await state.clear()
