import os
import random
import re
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramNetworkError
from config import OWNER_ID
from dabase.database import db_instance  # ‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –ë–î

dobcards_router = Router()

# üîπ –û—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
RARITY_POINTS = {
    "–æ–±—ã—á–Ω–∞—è": (50, 200),
    "—Ä–µ–¥–∫–∞—è": (350, 550),
    "—ç–ø–∏—á–µ—Å–∫–∞—è": (750, 1050),
    "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": (1350, 1850),
    "–º–∏—Ñ–∏—á–µ—Å–∫–∞—è": (2250, 2750),
}

# üîπ –ê—Ç–∞–∫–∞ –∏ –ó–¥–æ—Ä–æ–≤—å–µ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
RARITY_RANGES = {
    "–æ–±—ã—á–Ω–∞—è": {"attack": (10, 30), "hp": (20, 50)},
    "—Ä–µ–¥–∫–∞—è": {"attack": (30, 50), "hp": (50, 80)},
    "—ç–ø–∏—á–µ—Å–∫–∞—è": {"attack": (50, 80), "hp": (80, 120)},
    "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": {"attack": (80, 120), "hp": (120, 180)},
    "–º–∏—Ñ–∏—á–µ—Å–∫–∞—è": {"attack": (120, 180), "hp": (180, 250)},
}

# üîπ –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class AddCardState(StatesGroup):
    waiting_for_universe = State()
    waiting_for_photo = State()
    waiting_for_name = State()
    waiting_for_rarity = State()

# üîπ –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2
def escape_markdown(text: str) -> str:
    escape_chars = r"_*[]()~`>#+-=|{}.!"
    return re.sub(r"([{}])".format(re.escape(escape_chars)), r"\\\1", text)

# üîπ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ–ª–µ–Ω–Ω—ã–µ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
async def get_available_universes() -> list:
    db = await db_instance.get_connection()
    async with db.execute("SELECT universe_id, name FROM universes WHERE enabled = 1") as cursor:
        return await cursor.fetchall()

# üîπ –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ–ª–µ–Ω–Ω–æ–π
async def create_universe_inline_keyboard() -> InlineKeyboardMarkup:
    universes = await get_available_universes()
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=name.capitalize(), callback_data=f"universe_{universe_id}")]
            for universe_id, name in universes
        ]
    )

# üîπ –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏
def create_rarity_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=rar.capitalize(), callback_data=f"rarity_{rar}")]
            for rar in RARITY_RANGES
        ]
    )

# üîπ –ö–æ–º–∞–Ω–¥–∞ "/addcard"
@dobcards_router.message(Command("addcard"))
@dobcards_router.message(F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É")
async def add_card(message: types.Message, state: FSMContext):
    if message.from_user.id != OWNER_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    kb = await create_universe_inline_keyboard()
    if not kb.inline_keyboard:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –°–ø–∏—Å–æ–∫ –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É—Å—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ–ª–µ–Ω–Ω—É—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã:", reply_markup=kb)
    await state.set_state(AddCardState.waiting_for_universe)

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Å–µ–ª–µ–Ω–Ω–æ–π
@dobcards_router.callback_query(F.data.startswith("universe_"))
async def card_universe_received(callback: types.CallbackQuery, state: FSMContext):
    universe = callback.data.split("_", 1)[1]
    available_universes = [u[0] for u in await get_available_universes()]
    
    if universe not in available_universes:
        await callback.answer("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è!", show_alert=True)
        return

    await state.update_data(universe=universe)
    await callback.message.edit_text("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
    await state.set_state(AddCardState.waiting_for_photo)
    await callback.answer()

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç—ã
@dobcards_router.message(AddCardState.waiting_for_photo, F.photo)
async def card_photo_received(message: types.Message, state: FSMContext):
    data = await state.get_data()
    universe = data.get("universe")
    photo = message.photo[-1]

    folder_path = f"images/{universe}"
    os.makedirs(folder_path, exist_ok=True)
    file_path = f"{folder_path}/{photo.file_unique_id}.jpg"

    file = await message.bot.get_file(photo.file_id)
    await message.bot.download_file(file.file_path, destination=file_path)

    await state.update_data(photo_path=file_path)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã.")
    await state.set_state(AddCardState.waiting_for_name)

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∫–∞—Ä—Ç—ã
@dobcards_router.message(AddCardState.waiting_for_name)
async def card_name_received(message: types.Message, state: FSMContext):
    name = message.text.strip()
    await state.update_data(name=name)
    await message.answer("üé≤ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç—ã:", reply_markup=create_rarity_keyboard())
    await state.set_state(AddCardState.waiting_for_rarity)

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É
@dobcards_router.callback_query(F.data.startswith("rarity_"))
async def card_rarity_received(callback: types.CallbackQuery, state: FSMContext):
    rarity = callback.data.split("_", 1)[1]

    if rarity not in RARITY_RANGES:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å!", show_alert=True)
        return

    card_data = await state.get_data()
    name, photo_path, universe = card_data["name"], card_data["photo_path"], card_data["universe"]
    
    db = await db_instance.get_connection()
    async with db.execute(f"SELECT 1 FROM {universe} WHERE name = ?", (name,)) as cursor:
        if await cursor.fetchone():
            await callback.message.answer(f"‚ùå –ö–∞—Ä—Ç–∞ *{escape_markdown(name)}* —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", parse_mode="MarkdownV2")
            await state.clear()
            return

    attack = random.randint(*RARITY_RANGES[rarity]["attack"])
    hp = random.randint(*RARITY_RANGES[rarity]["hp"])
    points = random.choice(range(RARITY_POINTS[rarity][0], RARITY_POINTS[rarity][1] + 1, 50))

    await db.execute(f"""
        INSERT INTO {universe} (name, photo_path, rarity, attack, hp, points)
        VALUES (?, ?, ?, ?, ?, ?)
    """, (name, photo_path, rarity, attack, hp, points))
    await db.commit()

    try:
        await callback.message.answer(
            escape_markdown(
                f"‚úÖ –ö–∞—Ä—Ç–∞ {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ {universe.capitalize()}!\n\n"
                f"üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
                f"üé≤ –†–µ–¥–∫–æ—Å—Ç—å: {rarity.capitalize()}\n"
                f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {attack}\n"
                f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {hp}\n"
                f"üéñ –û—á–∫–∏: {points}"
            ),
            parse_mode="MarkdownV2"
        )
    except TelegramNetworkError:
        await callback.message.answer("üö® –û—à–∏–±–∫–∞ —Å–µ—Ç–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    await state.clear()
