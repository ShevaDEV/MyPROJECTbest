from aiogram import Router, types
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import aiosqlite
from dabase.database import db_instance  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ë–î

leaderboard_router = Router()

def create_leaderboard_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ø–∞."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_leaderboard")]
    ])

async def get_leaderboard_with_position(user_id: int) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ç–æ–ø–∞-10 —Å –ø–æ–∑–∏—Ü–∏–µ–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–≥–æ –ø–æ–∑–∏—Ü–∏–∏.
    :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç–æ–ø–∞.
    """
    async with await db_instance.get_connection() as db:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        async with db.execute("""
            SELECT username, total_points
            FROM users
            WHERE total_points > 0
            ORDER BY total_points DESC
            LIMIT 10
        """) as cursor:
            top_users = await cursor.fetchall()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with db.execute("""
            SELECT COUNT(*) + 1
            FROM users
            WHERE total_points > (SELECT total_points FROM users WHERE user_id = ?)
        """, (user_id,)) as cursor:
            user_position = (await cursor.fetchone())[0]

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with db.execute("""
            SELECT username, total_points
            FROM users
            WHERE user_id = ?
        """, (user_id,)) as cursor:
            current_user_data = await cursor.fetchone()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ø–∞
    leaderboard_text = "üèÜ *–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–∫–∞–º —Å–µ–∑–æ–Ω–∞:*\n\n"
    for i, row in enumerate(top_users, start=1):
        username, points = row
        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}Ô∏è‚É£"
        leaderboard_text += f"{medal} - {username or '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π'}: {points} –æ—á–∫–æ–≤\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ —Ç–æ–ø-10
    if user_position > 10 and current_user_data:
        leaderboard_text += "\n"
        leaderboard_text += f"‚ÑπÔ∏è *–í–∞—à–µ –º–µ—Å—Ç–æ*: {user_position} ({current_user_data[0] or '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π'}: {current_user_data[1]} –æ—á–∫–æ–≤)"

    return leaderboard_text

@leaderboard_router.message(Command("top"))
@leaderboard_router.message(Command("leaders"))
@leaderboard_router.message(lambda message: message.text and message.text.lower() == "–ª–∏–¥–µ—Ä—ã")
async def show_leaderboard(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ —Å –ø–æ–∑–∏—Ü–∏–µ–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ø–∞
    leaderboard_text = await get_leaderboard_with_position(user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø–æ–º
    await message.answer(leaderboard_text, parse_mode="Markdown", reply_markup=create_leaderboard_keyboard())

@leaderboard_router.callback_query(lambda callback: callback.data == "refresh_leaderboard")
async def refresh_leaderboard(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø–æ–º."""
    user_id = callback.from_user.id

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ø–∞
    leaderboard_text = await get_leaderboard_with_position(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    current_text = callback.message.text or ""
    current_reply_markup = callback.message.reply_markup

    new_reply_markup = create_leaderboard_keyboard()

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if current_text == leaderboard_text and current_reply_markup == new_reply_markup:
        await callback.answer("–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã!")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_text(
            leaderboard_text,
            parse_mode="Markdown",
            reply_markup=new_reply_markup
        )
        await callback.answer("–¢–æ–ø –æ–±–Ω–æ–≤–ª–µ–Ω!")
    except TelegramBadRequest as e:
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
        if "message is not modified" in str(e):
            await callback.answer("–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã!")
        else:
            raise
