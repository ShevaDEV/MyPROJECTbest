import aiosqlite
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

change_universe_router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –§–°–ú
class ChangeUniverseState(StatesGroup):
    waiting_for_universe = State()
    waiting_for_confirmation = State()  # –≠—Ç–∞–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è


async def get_available_universes():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    async with aiosqlite.connect("bot_database.db") as conn:
        cursor = await conn.execute("SELECT universe_id, name FROM universes WHERE enabled = 1")
        universes = await cursor.fetchall()
        return {name: universe_id for universe_id, name in universes}


async def reset_user_universe(user_id: int):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—á–∫–∏."""
    async with aiosqlite.connect("bot_database.db") as conn:
        await conn.execute("DELETE FROM user_cards WHERE user_id = ?", (user_id,))
        await conn.commit()


async def start_universe_change(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ —Å–º–µ–Ω—ã –≤—Å–µ–ª–µ–Ω–Ω–æ–π —á–µ—Ä–µ–∑ –§–°–ú."""
    available_universes = await get_available_universes()
    if not available_universes:
        await callback.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=name, callback_data=f"change_universe_{uid}")]
            for name, uid in available_universes.items()
        ] + [
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_universe_selection")]
        ]
    )

    await callback.message.answer(
        "üåå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≤—Å–µ–ª–µ–Ω–Ω—É—é (‚ö†Ô∏è –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∫–∞—Ä—Ç—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã! –û—á–∫–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è):",
        reply_markup=keyboard
    )
    await callback.answer()
    await state.set_state(ChangeUniverseState.waiting_for_universe)


@change_universe_router.callback_query(F.data.startswith("change_universe_"))
async def process_universe_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π (–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)."""
    try:
        new_universe_id = callback.data.split("_", 1)[1]
    except IndexError:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤—Å–µ–ª–µ–Ω–Ω—É—é.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤—Å–µ–ª–µ–Ω–Ω–∞—è
    async with aiosqlite.connect("bot_database.db") as conn:
        cursor = await conn.execute("SELECT COUNT(*) FROM universes WHERE universe_id = ?", (new_universe_id,))
        exists = await cursor.fetchone()
    
    if not exists or exists[0] == 0:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤—Å–µ–ª–µ–Ω–Ω—É—é –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(new_universe=new_universe_id)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_universe_change")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_universe_change")]
        ]
    )

    await callback.message.answer(
        "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!**\n\n–ü—Ä–∏ —Å–º–µ–Ω–µ –≤—Å–µ–ª–µ–Ω–Ω–æ–π **–≤—Å–µ –≤–∞—à–∏ –∫–∞—Ä—Ç—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã**.\n"
        "–í–∞—à–∏ –æ—á–∫–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏.\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –≤—Å–µ–ª–µ–Ω–Ω—É—é?",
        reply_markup=confirm_keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()
    await state.set_state(ChangeUniverseState.waiting_for_confirmation)  # –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è


@change_universe_router.callback_query(F.data == "confirm_universe_change")
async def confirm_change_universe(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–º–µ–Ω—É –≤—Å–µ–ª–µ–Ω–Ω–æ–π –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É –∫–∞—Ä—Ç."""
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –≤—Å–µ–ª–µ–Ω–Ω—É—é –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    new_universe_id = data.get("new_universe")

    if not new_universe_id:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–æ–≤–∞—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await reset_user_universe(user_id)

    async with aiosqlite.connect("bot_database.db") as conn:
        await conn.execute("UPDATE users SET selected_universe = ? WHERE user_id = ?", (new_universe_id, user_id))
        await conn.commit()

    await callback.message.answer("üéâ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –≤—Å–µ–ª–µ–Ω–Ω—É—é! –í–∞—à–∏ –∫–∞—Ä—Ç—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
    await callback.answer()
    await state.clear()


@change_universe_router.callback_query(F.data == "cancel_universe_change")
async def cancel_change_universe(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–º–µ–Ω—ã –≤—Å–µ–ª–µ–Ω–Ω–æ–π."""
    await callback.message.answer("–û—Ç–º–µ–Ω–∞ —Å–º–µ–Ω—ã –≤—Å–µ–ª–µ–Ω–Ω–æ–π. –í–∞—à–∏ –∫–∞—Ä—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    await callback.answer()
    await state.clear()
