from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import aiosqlite
from config import OWNER_ID

admin_router = Router()

# üìå –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FSM
class AddPromocodeStates(StatesGroup):
    waiting_for_promocode = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    waiting_for_bonus_and_limit = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –∏ –ª–∏–º–∏—Ç–∞

# üéõ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
def create_cancel_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

@admin_router.message(Command("add_promocode"))
@admin_router.message(F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
async def add_promocode_command(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if message.from_user.id != OWNER_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await state.set_state(AddPromocodeStates.waiting_for_promocode)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞*:",
        reply_markup=create_cancel_keyboard(),
        parse_mode="Markdown"
    )

@admin_router.message(AddPromocodeStates.waiting_for_promocode)
async def process_promocode_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if message.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return

    await state.update_data(promocode=message.text)
    await state.set_state(AddPromocodeStates.waiting_for_bonus_and_limit)

    await message.answer(
        "üé∞ –í–≤–µ–¥–∏—Ç–µ *–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤* –∏ *–ª–∏–º–∏—Ç* —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: `5 100`):",
        reply_markup=create_cancel_keyboard(),
        parse_mode="Markdown"
    )

@admin_router.message(AddPromocodeStates.waiting_for_bonus_and_limit)
async def process_bonus_and_limit(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ –∏ –ª–∏–º–∏—Ç"""
    if message.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return

    try:
        spins_bonus, usage_limit = map(int, message.text.split())
        if spins_bonus <= 0 or usage_limit <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ *–¥–≤–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞* —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: `5 100`).")
        return

    data = await state.get_data()
    promocode = data["promocode"]

    # üîπ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect("bot_database.db") as db:
        await db.execute("""
            INSERT INTO promocodes (promocode, spins_bonus, usage_limit) 
            VALUES (?, ?, ?)
        """, (promocode, spins_bonus, usage_limit))
        await db.commit()

    await state.clear()
    await message.answer(
        f"‚úÖ *–ü—Ä–æ–º–æ–∫–æ–¥* `{promocode}` *—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!*\n"
        f"üéÅ *–ë–æ–Ω—É—Å:* `{spins_bonus}` –ø—Ä–æ–∫—Ä—É—Ç–æ–∫\n"
        f"üî¢ *–õ–∏–º–∏—Ç:* `{usage_limit}` –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="Markdown"
    )
