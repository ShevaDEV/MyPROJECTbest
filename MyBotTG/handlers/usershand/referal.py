import aiosqlite
import random
from aiogram import Router, types, Bot
from aiogram.exceptions import TelegramAPIError
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import CHANNEL_ID, CHANNEL_LINK
from dabase.database import db_instance  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ

referal_router = Router()

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def is_user_subscribed(bot: Bot, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª."""
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception:
        return False  # –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_card_count(user_id: int) -> int:
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    async with await db_instance.get_connection() as db:
        async with db.execute("SELECT COUNT(*) FROM user_cards WHERE user_id = ?", (user_id,)) as cursor:
            count = await cursor.fetchone()
    return count[0] if count else 0

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
async def check_referral_validity(user_id: int, bot: Bot):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π:
    - –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª
    - –°–æ–±—Ä–∞–ª 3 –∫–∞—Ä—Ç—ã
    - –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è
    """
    async with await db_instance.get_connection() as db:
        async with db.execute("SELECT referrer_id, is_valid FROM referrals WHERE referral_id = ?", (user_id,)) as cursor:
            referral_data = await cursor.fetchone()

        if not referral_data:
            return

        referrer_id, is_valid = referral_data

        # –ï—Å–ª–∏ —É–∂–µ –∑–∞—Å—á–∏—Ç–∞–Ω ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if is_valid:
            return  

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if not await is_user_subscribed(bot, user_id):
            return  # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–±—Ä–∞–ª –ª–∏ 3 –∫–∞—Ä—Ç—ã
        if await get_user_card_count(user_id) < 3:
            return  

        # –ï—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        await db.execute("UPDATE referrals SET is_valid = 1 WHERE referral_id = ?", (user_id,))
        await db.execute("UPDATE users SET spins = spins + 1 WHERE user_id = ?", (referrer_id,))  # 1 –∫—Ä—É—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
        await db.execute("UPDATE users SET spins = spins + 2 WHERE user_id = ?", (user_id,))  # 2 –∫—Ä—É—Ç–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–º—É
        await db.commit()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
def get_referral_link(user_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return f"https://t.me/WhilacBot?start={user_id}"

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def referral_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É", url=f"https://t.me/share/url?url={get_referral_link(user_id)}")],
        [InlineKeyboardButton(text="üìä –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="my_referrals")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="back_to_profile")]
    ])

# –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /referral
@referal_router.message(Command("referral"))
@referal_router.message(lambda message: message.text.lower() == "—Ä–µ—Ñ–µ—Ä–∞–ª—ã")
async def show_referral_info(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
    user_id = message.chat.id
    referral_link = get_referral_link(user_id)

    text = (
        "üéØ *–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!* üéØ\n\n"
        "üìå *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É?*\n"
        "1Ô∏è‚É£ –¢–≤–æ–π –¥—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å *–Ω–æ–≤—ã–º –∏–≥—Ä–æ–∫–æ–º* (–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞ —Ä–∞–Ω—å—à–µ)\n"
        f"2Ô∏è‚É£ –û–Ω –¥–æ–ª–∂–µ–Ω *–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è* –Ω–∞ [–Ω–∞—à –∫–∞–Ω–∞–ª]({CHANNEL_LINK})\n"
        "3Ô∏è‚É£ –¢–∞–∫–∂–µ –æ–Ω –¥–æ–ª–∂–µ–Ω *–ø–æ–ª—É—á–∏—Ç—å 3 –∫–∞—Ä—Ç—ã* –≤ –∏–≥—Ä–µ\n\n"
        "üéÅ *–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ?*\n"
        "üë§ *–¢—ã* ‚Äî 1 –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫—Ä—É—Ç–∫—É üé°\n"
        "üÜï *–¢–≤–æ–π –¥—Ä—É–≥* ‚Äî 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—Ä—É—Ç–∫–∏ üéâ\n"
        "üî• *–ë–æ–Ω—É—Å:* –∑–∞ –∫–∞–∂–¥—ã–µ 5 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π —Ç—ã –ø–æ–ª—É—á–∏—à—å *–µ—â—ë 2 –∫—Ä—É—Ç–∫–∏!*\n\n"
        f"üìã *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*\n`{referral_link}`\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ! ‚ú®"
    )

    keyboard = referral_keyboard(user_id)

    try:
        await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    except TelegramAPIError:
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

# –•–µ–Ω–¥–ª–µ—Ä "–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã"
@referal_router.callback_query(lambda c: c.data == "my_referrals")
async def my_referrals(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –±–æ–Ω—É—Å—ã."""
    user_id = callback.from_user.id

    async with await db_instance.get_connection() as db:
        async with db.execute("SELECT COUNT(*) FROM referrals WHERE referrer_id = ? AND is_valid = 1", (user_id,)) as cursor:
            valid_referrals = await cursor.fetchone()

    valid_referrals = valid_referrals[0] if valid_referrals else 0
    extra_spins = (valid_referrals // 5) * 2  # +2 –∫—Ä—É—Ç–∫–∏ –∑–∞ –∫–∞–∂–¥—ã–µ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

    await callback.message.edit_text(
        f"üìä *–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã*\n\n"
        f"‚úÖ –ó–∞—Å—á–∏—Ç–∞–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{valid_referrals}*\n"
        f"üéÅ –ë–æ–Ω—É—Å–Ω—ã–µ –∫—Ä—É—Ç–∫–∏: *{valid_referrals}*\n"    
        f"üî• –î–æ–ø. –±–æ–Ω—É—Å –∑–∞ 5+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{extra_spins}*",
        parse_mode="Markdown"
    )
