from aiogram import Router, types
from aiogram.filters import Command
from datetime import datetime, timedelta
import sqlite3
import logging

dailyreward_router = Router()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_current_time():
    return datetime.now().strftime('%Y-%m-%d %H:%M:%S')

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞
def calculate_bonus(streak: int) -> int:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç—Ä–∏–∫–∞."""
    return min(streak, 7)  # –ú–∞–∫—Å–∏–º—É–º 7 –ø—Ä–æ–∫—Ä—É—Ç–æ–∫

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
async def give_daily_bonus(user_id: int) -> tuple[bool, int, int]:
    """
    –í—ã–¥–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 24 —á–∞—Å–∞.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Ö–æ—Ç—è –±—ã 1 –¥–µ–Ω—å ‚Äî —Å—Ç—Ä–∏–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è.
    
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: (—É—Å–ø–µ—Ö, –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–∫, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å)
    """
    try:
        with sqlite3.connect("bot_database.db") as conn:
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                SELECT last_claimed, daily_streak 
                FROM users 
                WHERE user_id = ?
            """, (user_id,))
            user_data = cursor.fetchone()

            if not user_data or not user_data[0]:
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
                cursor.execute("""
                    UPDATE users
                    SET last_claimed = ?, daily_streak = 1, spins = spins + 1
                    WHERE user_id = ?
                """, (get_current_time(), user_id))
                conn.commit()
                return True, 1, 1  # –í—ã–¥–∞–Ω 1 –±–æ–Ω—É—Å

            last_claimed, daily_streak = user_data
            last_claimed_time = datetime.strptime(last_claimed, '%Y-%m-%d %H:%M:%S')

            now = datetime.now()
            hours_since_last_claim = (now - last_claimed_time).total_seconds() / 3600

            if hours_since_last_claim < 24:
                return False, daily_streak, 0  # –ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è

            if hours_since_last_claim >= 48:
                daily_streak = 0  # ‚ùó –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∏–∫, –µ—Å–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω–æ –±–æ–ª—å—à–µ 1 –¥–Ω—è

            # –í—ã—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å (1-7 –ø—Ä–æ–∫—Ä—É—Ç–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∏–∫–∞)
            bonus = calculate_bonus(daily_streak + 1)

            cursor.execute("""
                UPDATE users
                SET last_claimed = ?, daily_streak = ?, spins = spins + ?
                WHERE user_id = ?
            """, (get_current_time(), daily_streak + 1, bonus, user_id))
            conn.commit()

            return True, daily_streak + 1, bonus  # ‚úÖ –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –±–æ–Ω—É—Å
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞: {e}")
        return False, 0, 0

# –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /daily
@dailyreward_router.message(Command("daily"))
async def daily_reward(message: types.Message):
    user_id = message.from_user.id
    success, streak, bonus = await give_daily_bonus(user_id)

    if success:
        reward_message = (
            f"üéÅ *–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!*\n\n"
            f"üåü –°—Ç—Ä–∏–∫: *{streak}* –¥–µ–Ω—å(–µ–π).\n"
            f"üîÑ –í—ã –ø–æ–ª—É—á–∏–ª–∏: *{bonus}* –ø—Ä–æ–∫—Ä—É—Ç–æ–∫."
        )
    else:
        reward_message = (
            f"‚è≥ *–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è.*\n\n"
            f"üåü –°—Ç—Ä–∏–∫: *{streak}* –¥–µ–Ω—å(–µ–π).\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞."
        )

    await message.answer(reward_message, parse_mode="Markdown")
