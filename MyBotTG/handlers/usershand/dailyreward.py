from aiogram import Router, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from datetime import datetime, timedelta
import sqlite3
import logging

dailyreward_router = Router()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_current_time():
    return datetime.now().strftime('%Y-%m-%d %H:%M:%S')

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞
def calculate_bonus(streak: int) -> int:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç—Ä–∏–∫–∞."""
    return min(streak + 1, 7)

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
async def give_daily_bonus(user_id: int) -> tuple[bool, int, int]:
    """
    –í—ã–¥–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 24 —á–∞—Å–∞.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: (—É—Å–ø–µ—Ö, –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–∫, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–∫)
    """
    try:
        with sqlite3.connect("bot_database.db") as conn:
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                SELECT last_claimed, daily_streak, spins 
                FROM users 
                WHERE user_id = ?
            """, (user_id,))
            user_data = cursor.fetchone()

            if not user_data or not user_data[0]:
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
                cursor.execute("""
                    UPDATE users
                    SET last_claimed = ?, daily_streak = 1, spins = spins + 1
                    WHERE user_id = ?
                """, (get_current_time(), user_id))
                conn.commit()
                return True, 1, 1

            last_claimed, daily_streak, spins = user_data
            last_claimed_time = datetime.strptime(last_claimed, '%Y-%m-%d %H:%M:%S')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞
            if datetime.now() - last_claimed_time < timedelta(hours=24):
                return False, daily_streak, spins

            # –í—ã—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            bonus = calculate_bonus(daily_streak)
            cursor.execute("""
                UPDATE users
                SET last_claimed = ?, daily_streak = daily_streak + 1, spins = spins + ?
                WHERE user_id = ?
            """, (get_current_time(), bonus, user_id))
            conn.commit()

            return True, daily_streak + 1, spins + bonus
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞: {e}")
        return False, 0, 0

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_daily_reward_keyboard(enable_button: bool) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞."""
    if enable_button:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", callback_data="get_daily_bonus")]
            ]
        )
    return InlineKeyboardMarkup(inline_keyboard=[])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–Ω—É—Å–∞
async def process_daily_bonus(user_id: int) -> tuple[str, InlineKeyboardMarkup, bool]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–¥–∞—á—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, —Ñ–ª–∞–≥ —É—Å–ø–µ—Ö–∞
    """
    success, streak, spins = await give_daily_bonus(user_id)

    if success:
        message = (
            f"üéÅ *–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!*\n\n"
            f"üåü –°—Ç—Ä–∏–∫: *{streak}* –¥–µ–Ω—å(–µ–π)\n"
            f"üîÑ –í—ã –ø–æ–ª—É—á–∏–ª–∏: *{spins}* –ø—Ä–æ–∫—Ä—É—Ç–æ–∫."
        )
    else:
        message = (
            f"‚è≥ *–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è.*\n\n"
            f"üåü –°—Ç—Ä–∏–∫: *{streak}* –¥–µ–Ω—å(–µ–π).\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞."
        )

    return message, create_daily_reward_keyboard(enable_button=success), success

# –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /daily
@dailyreward_router.message(Command("daily"))
async def daily_reward(message: types.Message):
    user_id = message.from_user.id
    reward_message, keyboard, _ = await process_daily_bonus(user_id)
    await message.answer(reward_message, reply_markup=keyboard, parse_mode="Markdown")

# –•–µ–Ω–¥–ª–µ—Ä –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@dailyreward_router.callback_query(lambda cb: cb.data == "get_daily_bonus")
async def handle_get_daily_bonus(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    reward_message, keyboard, success = await process_daily_bonus(user_id)

    try:
        await callback_query.message.edit_text(reward_message, reply_markup=keyboard, parse_mode="Markdown")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    await callback_query.answer("–ë–æ–Ω—É—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω!" if success else "–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω.")
