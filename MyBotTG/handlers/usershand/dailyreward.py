from aiogram import Router, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
import sqlite3
from datetime import datetime, timedelta

dailyreward_router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–¥—Ö–æ–¥—è—â–µ–º –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_current_time():
    return datetime.now().strftime('%Y-%m-%d %H:%M:%S')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
async def give_daily_bonus(user_id: int):
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞ –±–æ–Ω—É—Å–∞ –∏ —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫
    cursor.execute("""
        SELECT last_claimed, daily_streak, spins FROM users WHERE user_id = ?
    """, (user_id,))
    user_data = cursor.fetchone()

    if not user_data or not user_data[0]:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–±–æ—Ä–µ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
        cursor.execute("""
            UPDATE users
            SET last_claimed = ?, daily_streak = 1, spins = spins + 1
            WHERE user_id = ?
        """, (get_current_time(), user_id))
        conn.commit()
        conn.close()
        return True, 1, 1  # –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å —Å—Ç—Ä–∏–∫–∞, 1 –ø—Ä–æ–∫—Ä—É—Ç–∫–∞

    last_claimed, daily_streak, spins = user_data

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ datetime
    last_claimed_time = datetime.strptime(last_claimed, '%Y-%m-%d %H:%M:%S')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞
    if datetime.now() - last_claimed_time < timedelta(hours=24):
        conn.close()
        return False, daily_streak, spins  # –ë–æ–Ω—É—Å –Ω–µ–ª—å–∑—è —Å–æ–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 24 —á–∞—Å–æ–≤

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∏–∫–∞ (–º–∞–∫—Å–∏–º—É–º 7 –ø—Ä–æ–∫—Ä—É—Ç–æ–∫)
    bonus = min(daily_streak + 1, 7)

    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    cursor.execute("""
        UPDATE users
        SET last_claimed = ?, daily_streak = daily_streak + 1, spins = spins + ?
        WHERE user_id = ?
    """, (get_current_time(), bonus, user_id))
    conn.commit()
    conn.close()

    return True, daily_streak + 1, spins + bonus  # –£—Å–ø–µ—Ö, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç—Ä–∏–∫ –∏ –±–æ–Ω—É—Å

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –±–æ–Ω—É—Å–µ
def create_daily_reward_keyboard(enable_button: bool) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞."""
    if enable_button:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", callback_data="get_daily_bonus")]
        ])
    return InlineKeyboardMarkup(inline_keyboard=[])

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /daily
@dailyreward_router.message(Command("daily"))
async def daily_reward(message: types.Message):
    user_id = message.from_user.id

    # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤—ã–¥–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
    success, streak, spins = await give_daily_bonus(user_id)

    if success:
        # –ï—Å–ª–∏ –±–æ–Ω—É—Å –±—ã–ª –ø–æ–ª—É—á–µ–Ω
        reward_message = f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!\n\nüåü –°—Ç—Ä–∏–∫: {streak} –¥–µ–Ω—å(–µ–π)\nüîÑ –í—ã –ø–æ–ª—É—á–∏–ª–∏: {spins} –ø—Ä–æ–∫—Ä—É—Ç–æ–∫."
    else:
        # –ï—Å–ª–∏ –±–æ–Ω—É—Å –µ—â–µ –Ω–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å
        reward_message = f"‚è≥ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è.\n\nüåü –°—Ç—Ä–∏–∫: {streak} –¥–µ–Ω—å(–µ–π).\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞."

    await message.answer(reward_message, reply_markup=create_daily_reward_keyboard(enable_button=success))

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å"
@dailyreward_router.callback_query(lambda cb: cb.data == "get_daily_bonus")
async def handle_get_daily_bonus(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤—ã–¥–∞—Ç—å –±–æ–Ω—É—Å
    success, streak, spins = await give_daily_bonus(user_id)

    if success:
        # –ï—Å–ª–∏ –±–æ–Ω—É—Å –±—ã–ª –ø–æ–ª—É—á–µ–Ω
        reward_message = f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!\n\nüåü –°—Ç—Ä–∏–∫: {streak} –¥–µ–Ω—å(–µ–π)\nüîÑ –í—ã –ø–æ–ª—É—á–∏–ª–∏: {spins} –ø—Ä–æ–∫—Ä—É—Ç–æ–∫."
    else:
        # –ï—Å–ª–∏ –±–æ–Ω—É—Å –µ—â–µ –Ω–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å
        reward_message = f"‚è≥ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è.\n\nüåü –°—Ç—Ä–∏–∫: {streak} –¥–µ–Ω—å(–µ–π).\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞."

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    try:
        await callback_query.message.edit_text(
            reward_message,
            reply_markup=create_daily_reward_keyboard(enable_button=success)
        )
    except:
        pass
    await callback_query.answer()
