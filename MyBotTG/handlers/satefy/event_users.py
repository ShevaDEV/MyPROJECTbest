import logging
import asyncio
from aiogram import Router, types, Bot, F
from aiogram.filters import Command
from aiogram.types import ChatMemberUpdated
from aiogram.filters import ChatMemberUpdatedFilter
from aiogram.exceptions import TelegramAPIError
from dabase.database import db_instance
from utils.telegram_safe_request import safe_telegram_request  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å

logging.basicConfig(level=logging.INFO)
logging.getLogger('aiohttp').setLevel(logging.DEBUG)

event_router = Router()


async def save_user_to_db(chat_id: int, user: types.User, left: bool):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î."""
    username = user.username if user.username else f"user_{user.id}"
    full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()

    logging.info(f"üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} (@{username}) –≤ –ë–î (chat_id: {chat_id}, left: {left})")

    db = await db_instance.get_connection()
    async with db:
        try:
            await db.execute("""
                INSERT INTO chat_users (user_id, chat_id, username, full_name, left)
                VALUES (?, ?, ?, ?, ?)
                ON CONFLICT(user_id, chat_id) DO UPDATE SET
                    username = excluded.username,
                    full_name = excluded.full_name,
                    left = excluded.left
            """, (user.id, chat_id, username, full_name, left))
            await db.commit()
            logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} (@{username}) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")


async def save_all_chat_members(bot: Bot, chat_id: int):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã Telegram API."""
    logging.info(f"üìã –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_id}...")
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        try:
            bot_member = await safe_telegram_request(lambda: bot.get_chat_member(chat_id, bot.id))
        except TelegramAPIError as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}: {e}")
            raise

        if bot_member.status not in ["administrator", "creator"]:
            logging.warning(f"‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –≤ —á–∞—Ç–µ {chat_id}. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è.")
            return

        # 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        try:
            chat_admins = await safe_telegram_request(lambda: bot.get_chat_administrators(chat_id))
        except TelegramAPIError as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞ {chat_id}: {e}")
            raise

        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –ë–î
        db = await db_instance.get_connection()
        async with db:
            for admin in chat_admins:
                await save_user_to_db(chat_id, admin.user, left=False)
            await db.commit()
        logging.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(chat_admins)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")

        logging.info("üìú –û—Å—Ç–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (track_all_messages).")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞ {chat_id}: {e}")
        raise


@event_router.chat_member(ChatMemberUpdatedFilter(member_status_changed=F.new_chat_member))
async def user_joined(event: ChatMemberUpdated, bot: Bot):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ë–î."""
    user = event.new_chat_member.user
    chat_id = event.chat.id

    if user.id == bot.id:
        logging.info(f"ü§ñ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
        await save_all_chat_members(bot, chat_id)
    else:
        logging.info(f"‚úÖ –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {user.id} (@{user.username})")
        await save_user_to_db(chat_id, user, left=False)


@event_router.chat_member(ChatMemberUpdatedFilter(member_status_changed=F.left_chat_member))
async def user_left(event: ChatMemberUpdated):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –ë–î."""
    user = event.old_chat_member.user
    chat_id = event.chat.id

    logging.info(f"üö™ –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç: {user.id} (@{user.username})")
    await save_user_to_db(chat_id, user, left=True)


@event_router.chat_member(ChatMemberUpdatedFilter(member_status_changed=F.is_admin()))
async def bot_became_admin(event: ChatMemberUpdated, bot: Bot):
    """–ï—Å–ª–∏ –±–æ—Ç–∞ —Å–¥–µ–ª–∞–ª–∏ –∞–¥–º–∏–Ω–æ–º, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é."""
    chat_id = event.chat.id
    if event.new_chat_member.is_chat_admin():
        logging.info(f"üîß –ë–æ—Ç —Å—Ç–∞–ª –∞–¥–º–∏–Ω–æ–º –≤ —á–∞—Ç–µ {chat_id}. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
        await save_all_chat_members(bot, chat_id)


@event_router.message(Command("sync_users"))
async def sync_users(message: types.Message, bot: Bot):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
    chat_id = message.chat.id
    logging.info(f"üìã –ó–∞–ø—Ä–æ—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç {message.from_user.id} –≤ —á–∞—Ç–µ {chat_id}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        admins = await safe_telegram_request(lambda: bot.get_chat_administrators(chat_id))
        admin_ids = [admin.user.id for admin in admins]

        if message.from_user.id not in admin_ids:
            await safe_telegram_request(lambda: message.reply("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å."))
            return

        await save_all_chat_members(bot, chat_id)
        await safe_telegram_request(lambda: message.reply("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞."))
        logging.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ {chat_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        await safe_telegram_request(lambda: message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}"))


@event_router.message()
async def track_all_messages(message: types.Message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è."""
    if message.from_user:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ—Ö, –≤–∫–ª—é—á–∞—è –±–æ—Ç–æ–≤
        await save_user_to_db(message.chat.id, message.from_user, left=False)


async def update_all_users(bot: Bot):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö –∏–∑ –ë–î."""
    logging.info("üìã –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤...")

    try:
        db = await db_instance.get_connection()
        async with db:
            async with db.execute("SELECT DISTINCT chat_id FROM chat_users") as cursor:
                chat_ids = await cursor.fetchall()

        for chat_id_tuple in chat_ids:
            chat_id = chat_id_tuple[0]
            logging.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ {chat_id}...")
            try:
                await save_all_chat_members(bot, chat_id)
                logging.info(f"‚úÖ –ß–∞—Ç {chat_id} –æ–±–Ω–æ–≤–ª—ë–Ω.")
                await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ {chat_id}: {e}")

    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ update_all_users: {e}")


__all__ = ["event_router", "update_all_users"]