import time
import logging
import re
import asyncio
from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.exceptions import TelegramAPIError
from aiogram.types import ChatPermissions
from dabase.database import db_instance
from handlers.satefy.user_utils import get_user_id_by_username

logging.basicConfig(level=logging.INFO)
warn_router = Router()

# üî¥ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—Ä–Ω–æ–≤
WARN_LIMIT = 3  # –õ–∏–º–∏—Ç –≤–∞—Ä–Ω–æ–≤ –ø–µ—Ä–µ–¥ –º—É—Ç–æ–º
MUTE_DURATION = 7 * 24 * 60 * 60  # –ú—É—Ç –Ω–∞ 7 –¥–Ω–µ–π
WARN_EXPIRE = 7 * 24 * 60 * 60  # –í–∞—Ä–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π


def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
    if not text:
        return ""
    return re.sub(r"([_*\[\]()~`>#+\-=|{}.!])", r"\\\1", text)


async def get_user_id_from_message(message: types.Message, bot: Bot) -> tuple[int, str]:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç user_id –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ MarkdownV2-—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    args = message.text.split(maxsplit=2)

    if message.reply_to_message:
        user = message.reply_to_message.from_user
        user_name = escape_markdown(user.full_name or user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        mention = f"[{user_name}](tg://user?id={user.id})"
        return user.id, mention

    if len(args) > 1:
        if args[1].isdigit():
            return int(args[1]), f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å](tg://user?id={args[1]})"
        elif args[1].startswith("@"):
            user_id = await get_user_id_by_username(bot, message.chat.id, args[1])
            if user_id:
                user = await bot.get_chat_member(message.chat.id, user_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_name = escape_markdown(user.user.full_name or args[1])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                return user_id, f"[{user_name}](tg://user?id={user_id})"

    return None, None


@warn_router.message(Command("warn"))
async def cmd_warn(message: types.Message, bot: Bot):
    """üìå –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –≤–∞—Ä–Ω–∞."""
    chat_id = message.chat.id
    moderator_id = message.from_user.id
    user_id, mention = await get_user_id_from_message(message, bot)

    if not user_id:
        await message.reply("‚ö†Ô∏è *–û—à–∏–±–∫–∞:* –£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ª–∏–±–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.", parse_mode="MarkdownV2")
        return

    if user_id == moderator_id:
        await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞—Ç—å –≤–∞—Ä–Ω —Å–∞–º–æ–º—É —Å–µ–±–µ!*", parse_mode="MarkdownV2")
        return

    if user_id == bot.id:
        await message.reply("ü§ñ *–ë–æ—Ç–∞–º –Ω–µ–ª—å–∑—è –≤—ã–¥–∞–≤–∞—Ç—å –≤–∞—Ä–Ω—ã!*", parse_mode="MarkdownV2")
        return

    try:
        chat_member = await bot.get_chat_member(chat_id, user_id)
        await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞
    except TelegramAPIError:
        await message.reply("‚ùå *–û—à–∏–±–∫–∞:* –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", parse_mode="MarkdownV2")
        return

    if isinstance(chat_member, types.ChatMemberOwner):
        await message.reply("üëë *–û—à–∏–±–∫–∞:* –ù–µ–ª—å–∑—è –≤—ã–¥–∞–≤–∞—Ç—å –≤–∞—Ä–Ω—ã –≤–ª–∞–¥–µ–ª—å—Ü—É —á–∞—Ç–∞!", parse_mode="MarkdownV2")
        return

    if isinstance(chat_member, types.ChatMemberAdministrator) and not chat_member.user.is_bot:
        await message.reply("üõ° *–û—à–∏–±–∫–∞:* –ù–µ–ª—å–∑—è –≤—ã–¥–∞–≤–∞—Ç—å –≤–∞—Ä–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!", parse_mode="MarkdownV2")
        return

    args = message.text.split(maxsplit=2)
    reason = escape_markdown(args[2] if len(args) > 2 else "üö® –ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã")

    warns = await warn_user(chat_id, user_id, moderator_id, reason)

    if warns >= WARN_LIMIT:
        await mute_user(bot, chat_id, user_id, mention)
        await message.answer(f"üö´ *{mention} –ø–æ–ª—É—á–∏–ª {warns} –≤–∞—Ä–Ω–∞ –∏ —Ç–µ–ø–µ—Ä—å –≤ –º—É—Ç–µ –Ω–∞ 7 –¥–Ω–µ–π!*", parse_mode="MarkdownV2")
    else:
        await message.answer(f"‚ö†Ô∏è *{mention} –ø–æ–ª—É—á–∏–ª –≤–∞—Ä–Ω\\!*\nüìä *–í—Å–µ–≥–æ –≤–∞—Ä–Ω–æ–≤:* {warns}/3", parse_mode="MarkdownV2")


@warn_router.message(Command("unwarn"))
async def cmd_unwarn(message: types.Message, bot: Bot):
    """üìå –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è –û–î–ù–û–ì–û –≤–∞—Ä–Ω–∞."""
    chat_id = message.chat.id
    user_id, mention = await get_user_id_from_message(message, bot)

    if not user_id:
        await message.reply("‚ö†Ô∏è *–û—à–∏–±–∫–∞:* –£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ª–∏–±–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\\.", parse_mode="MarkdownV2")
        return

    warns = await get_active_warns(chat_id, user_id)
    if warns == 0:
        await message.reply(f"‚úÖ *–£ {mention} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–Ω–æ–≤\\.*", parse_mode="MarkdownV2")
        return

    await remove_warn(chat_id, user_id)
    warns -= 1

    await message.reply(f"‚úÖ *–°–Ω—è—Ç 1 –≤–∞—Ä–Ω —É {mention}\\.*\nüìä *–û—Å—Ç–∞–ª–æ—Å—å –≤–∞—Ä–Ω–æ–≤:* {warns}/3", parse_mode="MarkdownV2")


async def warn_user(chat_id: int, user_id: int, moderator_id: int, reason: str) -> int:
    """‚úÖ –í—ã–¥–∞—ë—Ç –≤–∞—Ä–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ –≤ –ë–î."""
    expire_at = int(time.time()) + WARN_EXPIRE
    db = await db_instance.get_connection()

    await db.execute("""
        INSERT INTO warns_log (chat_id, user_id, reason, moderator_id, timestamp, expire_at) 
        VALUES (?, ?, ?, ?, ?, ?)
    """, (chat_id, user_id, reason, moderator_id, int(time.time()), expire_at))
    await db.commit()

    return await get_active_warns(chat_id, user_id)


async def remove_warn(chat_id: int, user_id: int):
    """üóë –£–¥–∞–ª—è–µ—Ç –æ–¥–∏–Ω –≤–∞—Ä–Ω (—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π)."""
    db = await db_instance.get_connection()
    await db.execute("""
        DELETE FROM warns_log 
        WHERE rowid = (
            SELECT rowid FROM warns_log 
            WHERE chat_id = ? AND user_id = ? 
            ORDER BY timestamp ASC LIMIT 1
        )
    """, (chat_id, user_id))
    await db.commit()


async def get_active_warns(chat_id: int, user_id: int) -> int:
    """üìä –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ (–Ω–µ –∏—Å—Ç–µ–∫—à–∏–µ) –≤–∞—Ä–Ω—ã."""
    await clean_expired_warns()
    db = await db_instance.get_connection()
    async with db.execute("""
        SELECT COUNT(*) FROM warns_log 
        WHERE chat_id = ? AND user_id = ? AND expire_at > ?
    """, (chat_id, user_id, int(time.time()))) as cursor:
        count = await cursor.fetchone()
    return count[0] if count else 0


async def clean_expired_warns():
    """üóë –£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≤–∞—Ä–Ω—ã (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)."""
    db = await db_instance.get_connection()
    await db.execute("DELETE FROM warns_log WHERE expire_at <= ?", (int(time.time()),))
    await db.commit()


async def mute_user(bot: Bot, chat_id: int, user_id: int, mention: str):
    """üö´ –í—ã–¥–∞—ë—Ç –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ 7 –¥–Ω–µ–π."""
    until_time = int(time.time()) + MUTE_DURATION
    db = await db_instance.get_connection()

    await db.execute("""
        INSERT INTO moderation (chat_id, user_id, mute_until, timestamp)
        VALUES (?, ?, ?, ?) 
        ON CONFLICT(chat_id, user_id) DO UPDATE SET mute_until = ?, timestamp = ?
    """, (chat_id, user_id, until_time, int(time.time()), until_time, int(time.time())))
    await db.commit()

    try:
        await bot.restrict_chat_member(chat_id, user_id, ChatPermissions(), until_date=until_time)
        await bot.send_message(chat_id, f"üîá *{mention} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ 7 –¥–Ω–µ–π!*", parse_mode="MarkdownV2")
        await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞
    except TelegramAPIError:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")