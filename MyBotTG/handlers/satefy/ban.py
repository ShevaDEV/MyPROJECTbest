import logging
import re
import time
import asyncio
from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.exceptions import TelegramAPIError
from dabase.database import db_instance
from handlers.satefy.user_utils import get_user_id_by_username
from utils.telegram_queue import telegram_queue  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥—å

logging.basicConfig(level=logging.INFO)
ban_router = Router()


def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
    if not text:
        return ""
    return re.sub(r"([_*\[\]()~>#+\-=|{}.!])", r"\\\1", text)


async def check_and_remove_ban(bot: Bot):
    """üîç –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç—ë–∫ –ª–∏ –±–∞–Ω –∏ —Å–Ω–∏–º–∞–µ—Ç –µ–≥–æ."""
    now = int(time.time())
    db = await db_instance.get_connection()
    try:
        async with db.execute("SELECT chat_id, user_id FROM moderation WHERE ban_until > 0 AND ban_until <= ?", (now,)) as cursor:
            expired_bans = await cursor.fetchall()

        for chat_id, user_id in expired_bans:
            await unban_user(bot, chat_id, user_id)
    finally:
        await db.close()  # ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î


@ban_router.message(Command("ban"))
async def cmd_ban(message: types.Message, bot: Bot):
    """üö´ –ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–≤—Å–µ–≥–¥–∞ –∏–ª–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ä–æ–∫)."""
    chat_id = message.chat.id
    moderator_id = message.from_user.id
    text_lines = message.text.strip().split("\n", 1)  # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ 2 —Å—Ç—Ä–æ–∫–∏

    if len(text_lines) < 2:
        await telegram_queue.add_request(
            lambda: message.reply("‚ö†Ô∏è *–û—à–∏–±–∫–∞:* –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∏ –ø—Ä–∏—á–∏–Ω—É –Ω–∞ –≤—Ç–æ—Ä–æ–π.", parse_mode="MarkdownV2")
        )
        return

    args = text_lines[0].split()  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ä–æ–∫ –±–∞–Ω–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    username_or_id = args[1]  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ID
    user_id = await get_user_id_by_username(bot, chat_id, username_or_id)

    if not user_id:
        await telegram_queue.add_request(
            lambda: message.reply("‚ö†Ô∏è *–û—à–∏–±–∫–∞:* –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", parse_mode="MarkdownV2")
        )
        return

    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        chat_member = await telegram_queue.add_request(
            lambda: bot.get_chat_member(chat_id, user_id)
        )
        mention = f"@{chat_member.user.username}" if chat_member.user.username else f"[{chat_member.user.full_name}](tg://user?id={user_id})"
    except TelegramAPIError:
        mention = f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å](tg://user?id={user_id})"

    # ‚ùå –ó–∞–ø—Ä–µ—â–∞–µ–º –±–∞–Ω–∏—Ç—å —Å–µ–±—è, –±–æ—Ç–∞, –≤–ª–∞–¥–µ–ª—å—Ü–∞ —á–∞—Ç–∞ –∏ –∞–¥–º–∏–Ω–æ–≤
    if user_id == moderator_id:
        await telegram_queue.add_request(
            lambda: message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!*", parse_mode="MarkdownV2")
        )
        return

    if user_id == bot.id:
        await telegram_queue.add_request(
            lambda: message.reply("ü§ñ *–ë–æ—Ç–∞–º –Ω–µ–ª—å–∑—è –≤—ã–¥–∞–≤–∞—Ç—å –±–∞–Ω!*", parse_mode="MarkdownV2")
        )
        return

    if isinstance(chat_member, types.ChatMemberOwner):
        await telegram_queue.add_request(
            lambda: message.reply("üëë *–û—à–∏–±–∫–∞:* –ù–µ–ª—å–∑—è –±–∞–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ —á–∞—Ç–∞!", parse_mode="MarkdownV2")
        )
        return

    if isinstance(chat_member, types.ChatMemberAdministrator) and not chat_member.user.is_bot:
        await telegram_queue.add_request(
            lambda: message.reply("üõ° *–û—à–∏–±–∫–∞:* –ù–µ–ª—å–∑—è –±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!", parse_mode="MarkdownV2")
        )
        return

    # ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ–∫ –±–∞–Ω–∞
    ban_days = 0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞
    if len(args) > 2:
        match = re.match(r"(\d+)[–¥d]", args[2], re.IGNORECASE)
        if match:
            ban_days = int(match.group(1))

    # ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É
    reason = escape_markdown(text_lines[1])

    # ‚úÖ –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = await ban_user(bot, chat_id, user_id, mention, moderator_id, reason, ban_days)

    if success:
        duration_text = f" –Ω–∞ {ban_days} –¥–Ω." if ban_days > 0 else " –Ω–∞–≤—Å–µ–≥–¥–∞"
        await telegram_queue.add_request(
            lambda: message.answer(f"üö´ *{mention} –∑–∞–±–∞–Ω–µ–Ω{duration_text}*\nüìå *–ü—Ä–∏—á–∏–Ω–∞:* {reason}", parse_mode="MarkdownV2")
        )
    else:
        await telegram_queue.add_request(
            lambda: message.reply("‚ö†Ô∏è *–û—à–∏–±–∫–∞:* –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", parse_mode="MarkdownV2")
        )


@ban_router.message(Command("unban"))
async def cmd_unban(message: types.Message, bot: Bot):
    """‚úÖ –†–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    chat_id = message.chat.id
    args = message.text.split()

    if len(args) < 2:
        await telegram_queue.add_request(
            lambda: message.reply("‚ö†Ô∏è *–û—à–∏–±–∫–∞:* –£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", parse_mode="MarkdownV2")
        )
        return

    username_or_id = args[1]
    user_id = await get_user_id_by_username(bot, chat_id, username_or_id)
    if not user_id:
        await telegram_queue.add_request(
            lambda: message.reply("‚ö†Ô∏è *–û—à–∏–±–∫–∞:* –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", parse_mode="MarkdownV2")
        )
        return

    success = await unban_user(bot, chat_id, user_id)
    mention = f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å](tg://user?id={user_id})"

    if success:
        await telegram_queue.add_request(
            lambda: message.reply(f"‚úÖ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} —Ä–∞–∑–±–∞–Ω–µ–Ω\\!*", parse_mode="MarkdownV2")
        )
    else:
        await telegram_queue.add_request(
            lambda: message.reply("‚ö†Ô∏è *–û—à–∏–±–∫–∞:* –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", parse_mode="MarkdownV2")
        )


async def ban_user(bot: Bot, chat_id: int, user_id: int, mention: str, moderator_id: int, reason: str, days: int) -> bool:
    """üö´ –î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏ –≤ Telegram."""
    db = await db_instance.get_connection()
    try:
        current_time = int(time.time())
        ban_until = current_time + days * 86400 if days > 0 else 0  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥—ã

        await db.execute("""
            INSERT INTO moderation (chat_id, user_id, ban_until, ban_status, reason, moderator_id, timestamp)
            VALUES (?, ?, ?, 1, ?, ?, ?)
            ON CONFLICT(chat_id, user_id) DO UPDATE SET 
                ban_until = excluded.ban_until,
                ban_status = 1,
                reason = excluded.reason,
                moderator_id = excluded.moderator_id,
                timestamp = excluded.timestamp
        """, (chat_id, user_id, ban_until, reason, moderator_id, current_time))

        await db.commit()
    finally:
        await db.close()  # ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î

    try:
        await telegram_queue.add_request(
            lambda: bot.ban_chat_member(chat_id, user_id, until_date=ban_until if ban_until else None)
        )
        return True
    except TelegramAPIError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False


async def unban_user(bot: Bot, chat_id: int, user_id: int) -> bool:
    """‚úÖ –°–Ω–∏–º–∞–µ—Ç –±–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ë–î."""
    db = await db_instance.get_connection()
    try:
        await db.execute("UPDATE moderation SET ban_status = 0, ban_until = 0 WHERE chat_id = ? AND user_id = ?", (chat_id, user_id))
        await db.commit()
    finally:
        await db.close()  # ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î

    try:
        await telegram_queue.add_request(
            lambda: bot.unban_chat_member(chat_id, user_id, only_if_banned=True)
        )
        return True
    except TelegramAPIError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False