import time
import logging
import re
import asyncio
from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.exceptions import TelegramAPIError
from aiogram.types import ChatPermissions
from dabase.database import db_instance
from handlers.satefy.user_utils import get_user_id_by_username

logging.basicConfig(level=logging.INFO)
mute_router = Router()

# üî¥ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º—É—Ç–∞
DEFAULT_MUTE_DURATION = 24 * 60 * 60  # 1 –¥–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
    if not text:
        return ""
    return re.sub(r"([_*\[\]()~`>#+\-=|{}.!])", r"\\\\\1", text)  # ‚úÖ –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤


def parse_duration(duration: str) -> int:
    """üîç –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3—á, 2–¥) –≤ —Å–µ–∫—É–Ω–¥—ã."""
    match = re.match(r"(\d+)([—á–ßhH–¥–îdD]?)", duration)
    if not match:
        return DEFAULT_MUTE_DURATION  # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è, —Å—Ç–∞–≤–∏–º 24—á

    value, unit = match.groups()
    value = int(value)

    if unit.lower() in ["—á", "h"]:
        return value * 3600  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—ã –≤ —Å–µ–∫—É–Ω–¥—ã
    elif unit.lower() in ["–¥", "d"]:
        return value * 86400  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥—ã

    return DEFAULT_MUTE_DURATION  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, 24—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


async def check_and_remove_mute(bot: Bot):
    """üîç –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç—ë–∫ –ª–∏ –º—É—Ç –∏ —Å–Ω–∏–º–∞–µ—Ç –µ–≥–æ."""
    now = int(time.time())
    db = await db_instance.get_connection()
    try:
        async with db.execute("SELECT chat_id, user_id FROM moderation WHERE mute_until > 0 AND mute_until <= ?", (now,)) as cursor:
            expired_mutes = await cursor.fetchall()

        for chat_id, user_id in expired_mutes:
            await unmute_user(bot, chat_id, user_id)
    finally:
        await db.close()  # ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ


async def get_mention(bot: Bot, chat_id: int, user_id: int) -> str:
    """üîç –ü–æ–ª—É—á–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username –∏–ª–∏ full_name)."""
    try:
        chat_member = await bot.get_chat_member(chat_id, user_id)
        if chat_member.user.username:
            return f"@{chat_member.user.username}"
        return f"[{escape_markdown(chat_member.user.full_name)}](tg://user?id={user_id})"
    except TelegramAPIError:
        return f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å](tg://user?id={user_id})"


@mute_router.message(Command("mute"))
async def cmd_mute(message: types.Message, bot: Bot):
    """üìå –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –º—É—Ç–∞ —Å –≤–≤–æ–¥–æ–º –≤ 2 —Å—Ç—Ä–æ–∫–∏."""
    chat_id = message.chat.id
    moderator_id = message.from_user.id
    text_lines = message.text.strip().split("\n", 1)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

    if len(text_lines) < 2:
        await message.reply("‚ö†Ô∏è *–û—à–∏–±–∫–∞:* –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, –∞ –ø—Ä–∏—á–∏–Ω—É –Ω–∞ –≤—Ç–æ—Ä–æ–π\\.", parse_mode="MarkdownV2")
        return

    first_line = text_lines[0].split(maxsplit=2)  # –†–∞–∑–¥–µ–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (username + –≤—Ä–µ–º—è)
    if len(first_line) < 2:
        await message.reply("‚ö†Ô∏è *–û—à–∏–±–∫–∞:* –£–∫–∞–∂–∏—Ç–µ username –∏ –≤—Ä–µ–º—è –º—É—Ç–∞.", parse_mode="MarkdownV2")
        return

    username_or_id = first_line[1]  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ID
    duration = parse_duration(first_line[2]) if len(first_line) > 2 else DEFAULT_MUTE_DURATION  # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
    reason = escape_markdown(text_lines[1])  # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø—Ä–∏—á–∏–Ω–∞

    user_id = await get_user_id_by_username(bot, chat_id, username_or_id)
    if not user_id:
        await message.reply("‚ö†Ô∏è *–û—à–∏–±–∫–∞:* –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", parse_mode="MarkdownV2")
        return

    mention = await get_mention(bot, chat_id, user_id)  # ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞

    if user_id == moderator_id:
        await message.reply("‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!*", parse_mode="MarkdownV2")
        return

    if user_id == bot.id:
        await message.reply("ü§ñ *–ë–æ—Ç–∞–º –Ω–µ–ª—å–∑—è –≤—ã–¥–∞–≤–∞—Ç—å –º—É—Ç!*", parse_mode="MarkdownV2")
        return

    success = await mute_user(bot, chat_id, user_id, mention, duration, moderator_id, reason)

    if success:
        duration_text = f" –Ω–∞ {duration // 3600} —á\\." if duration < 86400 else f" –Ω–∞ {duration // 86400} –¥–Ω\\."
        await message.answer(f"üîá *{mention} –ø–æ–ª—É—á–∏–ª –º—É—Ç{duration_text}*\nüìå *–ü—Ä–∏—á–∏–Ω–∞:* {reason}", parse_mode="MarkdownV2")
    else:
        await message.reply("‚ö†Ô∏è *–û—à–∏–±–∫–∞:* –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –º—É—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", parse_mode="MarkdownV2")


async def mute_user(bot: Bot, chat_id: int, user_id: int, mention: str, duration: int, moderator_id: int, reason: str) -> bool:
    """üö´ –í—ã–¥–∞—ë—Ç –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."""
    until_time = int(time.time()) + duration
    db = await db_instance.get_connection()
    try:
        await db.execute("""
            INSERT INTO moderation (chat_id, user_id, mute_until, timestamp, reason, moderator_id)
            VALUES (?, ?, ?, ?, ?, ?) 
            ON CONFLICT(chat_id, user_id) DO UPDATE SET mute_until = ?, timestamp = ?, reason = ?, moderator_id = ?
        """, (chat_id, user_id, until_time, int(time.time()), reason, moderator_id,
              until_time, int(time.time()), reason, moderator_id))
        await db.commit()
    finally:
        await db.close()  # ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

    try:
        await bot.restrict_chat_member(chat_id, user_id, ChatPermissions(), until_date=until_time)
        await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞
        return True
    except TelegramAPIError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False


@mute_router.message(Command("unmute"))
async def cmd_unmute(message: types.Message, bot: Bot):
    """üìå –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è –º—É—Ç–∞ –≤—Ä—É—á–Ω—É—é."""
    chat_id = message.chat.id
    username_or_id = message.text.split()[-1]

    user_id = await get_user_id_by_username(bot, chat_id, username_or_id)
    if not user_id:
        await message.reply("‚ö†Ô∏è *–û—à–∏–±–∫–∞:* –£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", parse_mode="MarkdownV2")
        return

    success = await unmute_user(bot, chat_id, user_id)

    if success:
        mention = await get_mention(bot, chat_id, user_id)
        await message.reply(f"‚úÖ *–ú—É—Ç —Å {mention} —Å–Ω—è—Ç!*", parse_mode="MarkdownV2")
    else:
        await message.reply("‚ö†Ô∏è *–û—à–∏–±–∫–∞:* –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –º—É—Ç.", parse_mode="MarkdownV2")


async def unmute_user(bot: Bot, chat_id: int, user_id: int) -> bool:
    """‚úÖ –°–Ω–∏–º–∞–µ—Ç –º—É—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ë–î."""
    db = await db_instance.get_connection()
    try:
        await db.execute("UPDATE moderation SET mute_until = 0 WHERE chat_id = ? AND user_id = ?", (chat_id, user_id))
        await db.commit()
    finally:
        await db.close()  # ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

    try:
        await bot.restrict_chat_member(chat_id, user_id, ChatPermissions(
            can_send_messages=True,
            can_send_media_messages=True,
            can_send_other_messages=True,
            can_add_web_page_previews=True,
        ))
        await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞
        return True
    except TelegramAPIError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –º—É—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False